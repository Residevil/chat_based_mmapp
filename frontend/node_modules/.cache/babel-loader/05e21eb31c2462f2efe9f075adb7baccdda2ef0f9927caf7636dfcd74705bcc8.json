{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\alexa\\\\chat_based_mmapp\\\\frontend\\\\src\\\\components\\\\MindMap.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useCallback, useRef, useEffect } from 'react';\nimport { ReactFlow, Controls, Background, useNodesState, useEdgesState, MiniMap, addEdge, MarkerType, getIncomers, getOutgoers, getConnectedEdges } from '@xyflow/react';\nimport '@xyflow/react/dist/style.css';\nimport { toPng } from 'html-to-image';\nimport io from 'socket.io-client';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst SOCKET_URL = process.env.REACT_APP_SOCKET_URL || 'http://localhost:5000';\nconst socket = io(SOCKET_URL);\n\n// const initialNodes = [\n//   {\n//     id: \"1\",\n//     type: \"input\",\n//     data: { label: \"Mind Map\" },\n//     position: { x: 0, y: 0 },\n//   },\n// ];\n\n// const initialEdges = []\n\nconst onLoad = reactFlowInstance => {\n  console.log('flow loaded:', reactFlowInstance);\n  reactFlowInstance.fitView();\n};\n\n// // Custom node component\n// const CustomNode = ({ id, data, isConnectable }) => {\n//   const [isEditing, setIsEditing] = useState(false);\n//   const [label, setLabel] = useState(data.label);\n\n//   const handleDoubleClick = () => {\n//     setIsEditing(true);\n//   }\n\n//   const handleBlur =() => {\n//     setIsEditing(false);\n//     data.onNodesChange({ id, label });\n//   }\n\n//   // const handleAddChild = () => {\n//   //   data.onAddChild(id)\n//   // }\n\n//   const handleDelete = () => {\n//     data.onDelete(id);\n//   }\n\n//   return (\n//     <div\n//       style={{\n//         padding: '10px',\n//         border: '1px solid #ddd',\n//         borderRadius: '5px',\n//         background: 'white',\n//         minWidth: '150px',\n//       }}\n//       onDoubleClick={handleDoubleClick}\n//     >\n//       {isEditing ? (\n//         <input\n//           type=\"text\"\n//           value={label}\n//           onChange={(e) => setLabel(e.target.value)}\n//           onBlur={handleBlur}\n//           autoFocus\n//         />\n//       ) : (\n//         <div>{label}</div>\n//       )}\n//       {data.note && <div style={{ fontSize: '0.8em', color: '#666' }}>{data.note}</div>}\n//     </div>\n//   );\n// };\n\n// const nodeTypes = {\n//   custom: CustomNode,\n// };\n\nfunction MindMap({\n  data,\n  onUpdate\n}) {\n  _s();\n  const [nodes, setNodes, onNodesChange] = useNodesState([]);\n  const [edges, setEdges, onEdgesChange] = useEdgesState([]);\n  const [name, setName] = useState(\"\");\n  // const [translate, setTranslate] = useState({ x: 300, y: 50 });\n  // const [editingNode, setEditingNode] = useState(null);\n  const [showConfirmation, setShowConfirmation] = useState(false);\n  const reactFlowWrapper = useRef(null);\n  const reactFlowInstance = useRef(null);\n  // const [connectionMode, setConnectionMode] = useState(null);\n\n  useEffect(() => {\n    socket.on('clear_map', () => {\n      setNodes([]);\n      setEdges([]);\n    });\n    socket.on('map_updated', updatedMap => {\n      const {\n        nodes: newNodes,\n        edges: newEdges\n      } = convertToReactFlowFormat(updatedMap);\n      setNodes(newNodes);\n      setEdges(newEdges);\n    });\n    return () => {\n      socket.off('clear_map');\n      socket.off('map_updated');\n    };\n  }, [setNodes, setEdges]);\n  const new_mind_map = useCallback(() => {\n    setNodes([]);\n    setEdges([]);\n    onUpdate({\n      updatedMap: {\n        nodes: [],\n        edges: []\n      }\n    });\n  }, [setNodes, setEdges, onUpdate]);\n  const handleNewMindMap = () => {\n    setShowConfirmation(true);\n  };\n  const handleConfirmation = confirmed => {\n    setShowConfirmation(false);\n    if (confirmed) {\n      new_mind_map();\n    }\n  };\n\n  // Convert mind map data to React Flow format\n  useEffect(() => {\n    if (data) {\n      const {\n        nodes: newNodes,\n        edges: newEdges\n      } = convertToReactFlowFormat(data);\n      setNodes(newNodes);\n      setEdges(newEdges);\n    } else {\n      // Reset the mind map when there's no data\n      setNodes([]);\n      setEdges([]);\n    }\n  }, [data, setNodes, setEdges]);\n  const addNode = () => {\n    setNodes(e => e.concat({\n      id: (e.length + 1).toString(),\n      data: {\n        label: `${name}`\n      },\n      position: {\n        x: Math.random() * window.innerWidth,\n        y: Math.random() * window.innerHeight\n      },\n      style: {\n        border: \"10px solid #9999\"\n      }\n    }));\n  };\n  const onConnect = useCallback(params => {\n    const newEdge = {\n      ...params,\n      type: 'smoothstep',\n      markerEnd: {\n        type: MarkerType.ArrowClosed\n      }\n    };\n    setEdges(eds => addEdge(newEdge, eds));\n    onUpdate({\n      updatedEdges: [...edges, newEdge]\n    });\n  }, [setEdges, edges, onUpdate]);\n  const refreshPage = () => {\n    window.location.reload();\n  };\n  // const nodeOrigin = [0.5, 0.5];\n  const connectionLineStyle = {\n    stroke: \"#9999\",\n    strokeWidth: 3\n  };\n  const defaultEdgeOptions = {\n    style: connectionLineStyle,\n    type: \"mindmap\"\n  };\n  const onNodesDelete = useCallback(deleted => {\n    setEdges(deleted.reduce((acc, node) => {\n      const incomers = getIncomers(node, nodes, edges);\n      const outgoers = getOutgoers(node, nodes, edges);\n      const connectedEdges = getConnectedEdges([node], edges);\n      const remainingEdges = acc.filter(edge => !connectedEdges.includes(edge));\n      const createdEdges = incomers.flatMap(({\n        id: source\n      }) => outgoers.map(({\n        id: target\n      }) => ({\n        id: `${source}->${target}`,\n        source,\n        target\n      })));\n      return [...remainingEdges, ...createdEdges];\n    }, edges));\n  }, [nodes, edges]);\n\n  // const onNodeChange = useCallback(\n  //   (nodeId, newLabel) => {\n  //     setNodes((nds) =>\n  //       nds.map((node) =>\n  //         node.id === nodeId ? { ...node, data: { ...node.data, label: newLabel } } : node\n  //       )\n  //     );\n  //     onUpdate({ updatedNode: { id: nodeId, data: { label: newLabel }}});\n  //   },\n  //   [setNodes, onUpdate]\n  // );\n\n  // const onAddChild = useCallback(\n  //   (parentId) => {\n  //     const parentNode = nodes.find(node => node.id === parentId);\n  //     if (!parentNode) return;\n\n  //     const newNodeId = `node-${Date.now()}`;\n  //     const newNode = {\n  //       id: newNodeId,\n  //       type: 'custom',\n  //       position: {\n  //         x: parentNode.position.x + 200,\n  //         y: parentNode.position.y + 100,\n  //       },\n  //       data: { \n  //         label: 'New Node', \n  //         onNodeChange: onNodeChange, \n  //         onAddChild: onAddChild, \n  //       },\n  //     };\n  //     const newEdge = {\n  //       id: `edge-${parentId}-${newNodeId}`,\n  //       source: parentId,\n  //       target: newNodeId,\n  //       type: 'smoothstep',\n  //       markerEnd: { type: MarkerType.ArrowClosed },\n  //     };\n\n  //     setNodes((nds) => [...nds, newNode]);\n  //     setEdges((eds) => [...eds, newEdge]);\n  //     onUpdate({ updatedMap: { nodes: [...nodes, newNode], edges: [...edges, newEdge] } });\n  //   },\n  //   [setNodes, setEdges, onNodeChange, onUpdate, nodes, edges]\n  // );\n\n  // React.useEffect(() => {\n  //   if (data) {\n  //     const rootNode = {\n  //       id: 'root',\n  //       type: 'custom',\n  //       position: { x: 0, y: 0 },\n  //       data: { label: data.name, onNodeChange: (label) => onNodeChange('root', label) },\n  //     };\n  //     setNodes([rootNode]);\n  //   }\n  // }, [data, setNodes, onNodeChange]);\n\n  // const onDragOver = useCallback((event) => {\n  //   event.preventDefault();\n  //   event.dataTransfer.dropEffect = 'move';\n  // }, []);\n\n  // const onDrop = useCallback(\n  //   (event) => {\n  //     event.preventDefault();\n\n  //     const reactFlowBounds = reactFlowWrapper.current.getBoundingClientRect();\n  //     const type = event.dataTransfer.getData('application/reactflow');\n\n  //     if (typeof type === 'undefined' || !type) {\n  //       return;\n  //     }\n\n  //     const position = reactFlowInstance.current.project({\n  //       x: event.clientX - reactFlowBounds.left,\n  //       y: event.clientY - reactFlowBounds.top,\n  //     });\n  //     const newNode = {\n  //       id: `node-${Date.now()}`,\n  //       type,\n  //       position,\n  //       data: { label: `${type} node`, onNodeChange: (label) => onNodeChange(`node-${Date.now()}`, label) },\n  //     };\n\n  //     setNodes((nds) => nds.concat(newNode));\n  //   },\n  //   [setNodes, onNodeChange]\n  // );\n  // const handleNodeClick = (event, node) => {\n  //   // Handle node click for editing\n  //   setEditingNode(node);\n  // };\n\n  // const handleEditSubmit = (e) => {\n  //   e.preventDefault();\n  //   const updatedNode = {\n  //     ...editingNode,\n  //     data: {\n  //       ...editingNode.data,\n  //       label: e.target.elements.nodeName.value,\n  //       note: e.target.elements.nodeNote.value,\n  //     },\n  //   };\n  //   setNodes((nds) => nds.map((node) => (node.id === updatedNode.id ? updatedNode : node)));\n  //   onUpdate({ updatedNode });\n  //   setEditingNode(null);\n  // };\n\n  // const handleAddChild = () => {\n  //   const newChildId = `${editingNode.id}-child-${Date.now()}`;\n  //   const newChild = {\n  //     id: newChildId,\n  //     type: 'custom',\n  //     position: { x: editingNode.position.x + 200, y: editingNode.position.y },\n  //     data: { label: 'New Child', note: '' },\n  //   };\n  //   const newEdge = { id: `${editingNode.id}-${newChildId}`, source: editingNode.id, target: newChildId, type: 'smoothstep' };\n\n  //   setNodes((nds) => [...nds, newChild]);\n  //   setEdges((eds) => [...eds, newEdge]);\n  //   onUpdate({ updatedNode: newChild });\n  // };\n\n  // Saving Mind Map as PNG file\n  const handleSave = useCallback(() => {\n    if (reactFlowInstance.current && reactFlowWrapper.current) {\n      const flow = reactFlowInstance.current;\n      const {\n        nodes,\n        edges\n      } = flow.toObject();\n\n      // Calculate the bounding box of all nodes\n      const bbox = nodes.reduce((acc, node) => {\n        acc.left = Math.min(acc.left, node.position.x);\n        acc.top = Math.min(acc.top, node.position.y);\n        acc.right = Math.max(acc.right, node.position.x + (node.width || 150));\n        acc.bottom = Math.max(acc.bottom, node.position.y + (node.height || 50));\n        return acc;\n      }, {\n        left: Infinity,\n        top: Infinity,\n        right: -Infinity,\n        bottom: -Infinity\n      });\n\n      // Add padding\n      const padding = 50;\n      bbox.left -= padding;\n      bbox.top -= padding;\n      bbox.right += padding;\n      bbox.bottom += padding;\n      const width = bbox.right - bbox.left;\n      const height = bbox.bottom - bbox.top;\n\n      // Calculate the zoom level to fit the entire mind map\n      const xZoom = reactFlowWrapper.current.offsetWidth / width;\n      const yZoom = reactFlowWrapper.current.offsetHeight / height;\n      const zoomLevel = Math.min(xZoom, yZoom, 1); // Limit zoom to 0.75 to prevent excessive enlargement\n\n      // Set the viewport to include all nodes\n      flow.setViewport({\n        x: -bbox.left * zoomLevel,\n        y: -bbox.top * zoomLevel,\n        zoom: zoomLevel\n      }, {\n        duration: 0\n      });\n\n      // Wait for the viewport change to take effect\n      setTimeout(() => {\n        toPng(reactFlowWrapper.current, {\n          backgroundColor: '#ffffff',\n          width: reactFlowWrapper.current.offsetWidth,\n          height: reactFlowWrapper.current.offsetHeight\n        }).then(dataUrl => {\n          const link = document.createElement('a');\n          link.download = 'mind-map.png';\n          link.href = dataUrl;\n          link.click();\n        }).catch(error => {\n          console.error('Error saving mind map:', error);\n        });\n      }, 100);\n    }\n  }, []);\n\n  // const toggleConnectionMode = () => {\n  //   setConnectionMode(prev => prev ? null : 'connect');\n  // };\n\n  //     toPng(reactFlowWrapper.current, { \n  //       cacheBust: true, \n  //       backgroundColor: '#ffffff',\n  //       width: width,\n  //       height: height,\n  //       style: {\n  //         width: `${width}px`,\n  //         height: `${height}px`,\n  //       },\n  //     })\n  //       .then((dataUrl) => {\n  //         const link = document.createElement('a');\n  //         link.download = 'mind-map.png';\n  //         link.href = dataUrl;\n  //         link.click();\n  //       })\n  //       .catch((error) => {\n  //         console.error('Error saving mind map:', error);\n  //       });\n  //   }\n  // }, []);\n\n  console.log('MindMap component received data:', data);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    ref: reactFlowWrapper,\n    style: {\n      width: '100%',\n      height: '500px',\n      border: '1px solid black'\n    },\n    children: [/*#__PURE__*/_jsxDEV(ReactFlow, {\n      nodes: nodes,\n      edges: edges,\n      onNodesChange: onNodesChange,\n      onNodesDelete: onNodesDelete,\n      onEdgesChange: onEdgesChange,\n      onConnect: onConnect\n      // onNodeClick={handleNodeClick}\n      // nodeTypes={nodeTypes}\n      ,\n      onInit: instance => reactFlowInstance.current = instance,\n      onLoad: onLoad\n      // onDrop={onDrop}\n      // onDragOver={onDragOver}\n      ,\n      fitView: true,\n      children: [/*#__PURE__*/_jsxDEV(Controls, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 439,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(MiniMap, {\n        nodeColor: n => {\n          if (n.type === \"input\") return \"blue\";\n          return \"#FFCC00\";\n        }\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 440,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Background, {\n        variant: \"dots\",\n        gap: 12,\n        size: 1\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 447,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 424,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        position: 'absolute',\n        top: 10,\n        left: 10\n      },\n      children: [/*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        onChange: e => setName(e.target.value),\n        name: \"title\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 451,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        type: \"button\",\n        onClick: addNode,\n        children: \"Add Node\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 456,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        type: \"button\",\n        onClick: handleNewMindMap,\n        children: \"New Mind Map\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 459,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 450,\n      columnNumber: 7\n    }, this), showConfirmation && /*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        position: 'absolute',\n        top: '50%',\n        left: '50%',\n        transform: 'translate(-50%, -50%)',\n        background: 'white',\n        padding: '20px',\n        borderRadius: '5px',\n        boxShadow: '0 0 10px rgba(0,0,0,0.1)',\n        zIndex: 1000\n      },\n      children: [/*#__PURE__*/_jsxDEV(\"p\", {\n        children: \"Are you sure you want to create a new mind map? All current data will be lost.\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 476,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: () => handleConfirmation(true),\n        children: \"Yes\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 477,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: () => handleConfirmation(false),\n        children: \"No\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 478,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 465,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: handleSave,\n      style: {\n        position: 'absolute',\n        bottom: 10,\n        right: 10\n      },\n      children: \"Save as PNG\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 515,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 423,\n    columnNumber: 5\n  }, this);\n}\n\n// Helper function to convert mind map data to React Flow format\n_s(MindMap, \"Sih7JuXlxhrIvCuYkAcCeK466xA=\", false, function () {\n  return [useNodesState, useEdgesState];\n});\n_c = MindMap;\nfunction convertToReactFlowFormat(data, parentId = null, x = 0, y = 0) {\n  const nodes = [];\n  const edges = [];\n  const nodeWidth = 150;\n  const nodeHeight = 50;\n  const horizontalSpacing = 200;\n  const verticalSpacing = 100;\n  function processNode(node, parentId, x, y) {\n    var _node$attributes;\n    // const id = `${level}-${index}-${node.name.replace(/\\s+/g, '-').toLowerCase()}`;\n    // const x = level * horizontalSpacing;\n    // const y = index * verticalSpacing;    \n    const id = `${node.name.replace(/\\s+/g, '-').toLowerCase()}-${Date.now()}`;\n    nodes.push({\n      id,\n      type: 'custom',\n      position: {\n        x,\n        y\n      },\n      data: {\n        label: node.name,\n        note: (_node$attributes = node.attributes) === null || _node$attributes === void 0 ? void 0 : _node$attributes.note,\n        onNodeChange: () => {} // This will be set in the MindMap Component\n      },\n      style: {\n        width: nodeWidth,\n        height: nodeHeight\n      }\n    });\n    if (parentId) {\n      edges.push({\n        id: `${parentId}-${id}`,\n        source: parentId,\n        target: id,\n        // type: 'smoothstep', \n        markerEnd: {\n          type: MarkerType.ArrowClosed\n        }\n      });\n    }\n    if (node.children) {\n      node.children.forEach((child, index) => {\n        const childX = x + horizontalSpacing;\n        const childY = y + (index - (node.children.length - 1) / 2) * verticalSpacing;\n        const {\n          childNodes,\n          childEdges\n        } = processNode(child, id, childX, childY);\n        nodes.push(...childNodes);\n        edges.push(...childEdges);\n      });\n    }\n    return {\n      childNodes: nodes,\n      childEdges: edges\n    };\n  }\n  const {\n    childNodes,\n    childEdges\n  } = processNode(data, parentId, x, y);\n  return {\n    nodes: childNodes,\n    edges: childEdges\n  };\n}\nexport default MindMap;\nvar _c;\n$RefreshReg$(_c, \"MindMap\");","map":{"version":3,"names":["React","useState","useCallback","useRef","useEffect","ReactFlow","Controls","Background","useNodesState","useEdgesState","MiniMap","addEdge","MarkerType","getIncomers","getOutgoers","getConnectedEdges","toPng","io","jsxDEV","_jsxDEV","SOCKET_URL","process","env","REACT_APP_SOCKET_URL","socket","onLoad","reactFlowInstance","console","log","fitView","MindMap","data","onUpdate","_s","nodes","setNodes","onNodesChange","edges","setEdges","onEdgesChange","name","setName","showConfirmation","setShowConfirmation","reactFlowWrapper","on","updatedMap","newNodes","newEdges","convertToReactFlowFormat","off","new_mind_map","handleNewMindMap","handleConfirmation","confirmed","addNode","e","concat","id","length","toString","label","position","x","Math","random","window","innerWidth","y","innerHeight","style","border","onConnect","params","newEdge","type","markerEnd","ArrowClosed","eds","updatedEdges","refreshPage","location","reload","connectionLineStyle","stroke","strokeWidth","defaultEdgeOptions","onNodesDelete","deleted","reduce","acc","node","incomers","outgoers","connectedEdges","remainingEdges","filter","edge","includes","createdEdges","flatMap","source","map","target","handleSave","current","flow","toObject","bbox","left","min","top","right","max","width","bottom","height","Infinity","padding","xZoom","offsetWidth","yZoom","offsetHeight","zoomLevel","setViewport","zoom","duration","setTimeout","backgroundColor","then","dataUrl","link","document","createElement","download","href","click","catch","error","ref","children","onInit","instance","fileName","_jsxFileName","lineNumber","columnNumber","nodeColor","n","variant","gap","size","onChange","value","onClick","transform","background","borderRadius","boxShadow","zIndex","_c","parentId","nodeWidth","nodeHeight","horizontalSpacing","verticalSpacing","processNode","_node$attributes","replace","toLowerCase","Date","now","push","note","attributes","onNodeChange","forEach","child","index","childX","childY","childNodes","childEdges","$RefreshReg$"],"sources":["C:/Users/alexa/chat_based_mmapp/frontend/src/components/MindMap.js"],"sourcesContent":["import React, { useState, useCallback, useRef, useEffect } from 'react';\r\nimport {\r\n  ReactFlow,\r\n  Controls,\r\n  Background,\r\n  useNodesState,\r\n  useEdgesState,\r\n  MiniMap,\r\n  addEdge,\r\n  MarkerType,\r\n  getIncomers,\r\n  getOutgoers,\r\n  getConnectedEdges,\r\n} from '@xyflow/react';\r\nimport '@xyflow/react/dist/style.css';\r\nimport { toPng } from 'html-to-image';\r\nimport io from 'socket.io-client';\r\n\r\nconst SOCKET_URL = process.env.REACT_APP_SOCKET_URL || 'http://localhost:5000';\r\nconst socket = io(SOCKET_URL);\r\n\r\n// const initialNodes = [\r\n//   {\r\n//     id: \"1\",\r\n//     type: \"input\",\r\n//     data: { label: \"Mind Map\" },\r\n//     position: { x: 0, y: 0 },\r\n//   },\r\n// ];\r\n\r\n// const initialEdges = []\r\n\r\nconst onLoad = (reactFlowInstance) => {\r\n  console.log('flow loaded:', reactFlowInstance);\r\n  reactFlowInstance.fitView()\r\n}\r\n\r\n// // Custom node component\r\n// const CustomNode = ({ id, data, isConnectable }) => {\r\n//   const [isEditing, setIsEditing] = useState(false);\r\n//   const [label, setLabel] = useState(data.label);\r\n\r\n//   const handleDoubleClick = () => {\r\n//     setIsEditing(true);\r\n//   }\r\n\r\n//   const handleBlur =() => {\r\n//     setIsEditing(false);\r\n//     data.onNodesChange({ id, label });\r\n//   }\r\n\r\n//   // const handleAddChild = () => {\r\n//   //   data.onAddChild(id)\r\n//   // }\r\n\r\n//   const handleDelete = () => {\r\n//     data.onDelete(id);\r\n//   }\r\n  \r\n//   return (\r\n//     <div\r\n//       style={{\r\n//         padding: '10px',\r\n//         border: '1px solid #ddd',\r\n//         borderRadius: '5px',\r\n//         background: 'white',\r\n//         minWidth: '150px',\r\n//       }}\r\n//       onDoubleClick={handleDoubleClick}\r\n//     >\r\n//       {isEditing ? (\r\n//         <input\r\n//           type=\"text\"\r\n//           value={label}\r\n//           onChange={(e) => setLabel(e.target.value)}\r\n//           onBlur={handleBlur}\r\n//           autoFocus\r\n//         />\r\n//       ) : (\r\n//         <div>{label}</div>\r\n//       )}\r\n//       {data.note && <div style={{ fontSize: '0.8em', color: '#666' }}>{data.note}</div>}\r\n//     </div>\r\n//   );\r\n// };\r\n\r\n// const nodeTypes = {\r\n//   custom: CustomNode,\r\n// };\r\n\r\nfunction MindMap({ data, onUpdate }) {\r\n  const [nodes, setNodes, onNodesChange] = useNodesState([]);\r\n  const [edges, setEdges, onEdgesChange] = useEdgesState([]);\r\n  const [name, setName] = useState(\"\");\r\n  // const [translate, setTranslate] = useState({ x: 300, y: 50 });\r\n  // const [editingNode, setEditingNode] = useState(null);\r\n  const [showConfirmation, setShowConfirmation] = useState(false);\r\n  const reactFlowWrapper = useRef(null);\r\n  const reactFlowInstance = useRef(null);\r\n  // const [connectionMode, setConnectionMode] = useState(null);\r\n\r\n  useEffect(() => {\r\n    socket.on('clear_map', () => {\r\n      setNodes([]);\r\n      setEdges([]);\r\n    });\r\n\r\n    socket.on('map_updated', (updatedMap) => {\r\n      const { nodes: newNodes, edges: newEdges } = convertToReactFlowFormat(updatedMap);\r\n      setNodes(newNodes);\r\n      setEdges(newEdges);\r\n    });\r\n\r\n    return () => {\r\n      socket.off('clear_map');\r\n      socket.off('map_updated');\r\n    };\r\n  }, [setNodes, setEdges]);\r\n\r\n  const new_mind_map = useCallback(() => {\r\n    setNodes([]);\r\n    setEdges([]);\r\n    onUpdate({ updatedMap: { nodes: [], edges: [] } });\r\n  }, [setNodes, setEdges, onUpdate]);\r\n\r\n  const handleNewMindMap = () => {\r\n    setShowConfirmation(true);\r\n  };\r\n\r\n  const handleConfirmation = (confirmed) => {\r\n    setShowConfirmation(false);\r\n    if (confirmed) {\r\n      new_mind_map();\r\n    }\r\n  };\r\n\r\n  // Convert mind map data to React Flow format\r\n  useEffect(() => {\r\n    if (data) {\r\n      const { nodes: newNodes, edges: newEdges } = convertToReactFlowFormat(data);\r\n      setNodes(newNodes);\r\n      setEdges(newEdges);\r\n    } else {\r\n      // Reset the mind map when there's no data\r\n      setNodes([]);\r\n      setEdges([]);\r\n    }\r\n  }, [data, setNodes, setEdges]);\r\n\r\n  const addNode = () => {\r\n    setNodes((e) =>\r\n      e.concat({\r\n        id: (e.length + 1).toString(),\r\n        data: { label: `${name}` },\r\n        position: {\r\n          x: Math.random() * window.innerWidth,\r\n          y: Math.random() * window.innerHeight,\r\n        },\r\n        style: { border: \"10px solid #9999\" },\r\n      })\r\n    );\r\n  };\r\n\r\n  const onConnect = useCallback((params) => {\r\n    const newEdge = { ...params, type: 'smoothstep', markerEnd: { type: MarkerType.ArrowClosed } };\r\n    setEdges((eds) => addEdge(newEdge, eds));\r\n    onUpdate({ updatedEdges: [...edges, newEdge] });\r\n  }, [setEdges, edges, onUpdate])\r\n\r\n  const refreshPage = () => {\r\n    window.location.reload();\r\n  }\r\n  // const nodeOrigin = [0.5, 0.5];\r\n  const connectionLineStyle = {\r\n    stroke: \"#9999\",\r\n    strokeWidth: 3,\r\n    \r\n  };\r\n  const defaultEdgeOptions = { style: connectionLineStyle, type: \"mindmap\" };\r\n\r\n  const onNodesDelete = useCallback(\r\n    (deleted) => {\r\n      setEdges(\r\n        deleted.reduce((acc, node) => {\r\n          const incomers = getIncomers(node, nodes, edges);\r\n          const outgoers = getOutgoers(node, nodes, edges);\r\n          const connectedEdges = getConnectedEdges([node], edges);\r\n\r\n          const remainingEdges = acc.filter(\r\n            (edge) => !connectedEdges.includes(edge),\r\n          );\r\n\r\n          const createdEdges = incomers.flatMap(({ id: source }) =>\r\n            outgoers.map(({ id: target }) => ({\r\n              id: `${source}->${target}`,\r\n              source,\r\n              target,\r\n            })),\r\n          );\r\n\r\n          return [...remainingEdges, ...createdEdges];\r\n        }, edges),\r\n      );\r\n    },\r\n    [nodes, edges],\r\n  );\r\n\r\n  // const onNodeChange = useCallback(\r\n  //   (nodeId, newLabel) => {\r\n  //     setNodes((nds) =>\r\n  //       nds.map((node) =>\r\n  //         node.id === nodeId ? { ...node, data: { ...node.data, label: newLabel } } : node\r\n  //       )\r\n  //     );\r\n  //     onUpdate({ updatedNode: { id: nodeId, data: { label: newLabel }}});\r\n  //   },\r\n  //   [setNodes, onUpdate]\r\n  // );\r\n\r\n  // const onAddChild = useCallback(\r\n  //   (parentId) => {\r\n  //     const parentNode = nodes.find(node => node.id === parentId);\r\n  //     if (!parentNode) return;\r\n\r\n  //     const newNodeId = `node-${Date.now()}`;\r\n  //     const newNode = {\r\n  //       id: newNodeId,\r\n  //       type: 'custom',\r\n  //       position: {\r\n  //         x: parentNode.position.x + 200,\r\n  //         y: parentNode.position.y + 100,\r\n  //       },\r\n  //       data: { \r\n  //         label: 'New Node', \r\n  //         onNodeChange: onNodeChange, \r\n  //         onAddChild: onAddChild, \r\n  //       },\r\n  //     };\r\n  //     const newEdge = {\r\n  //       id: `edge-${parentId}-${newNodeId}`,\r\n  //       source: parentId,\r\n  //       target: newNodeId,\r\n  //       type: 'smoothstep',\r\n  //       markerEnd: { type: MarkerType.ArrowClosed },\r\n  //     };\r\n\r\n  //     setNodes((nds) => [...nds, newNode]);\r\n  //     setEdges((eds) => [...eds, newEdge]);\r\n  //     onUpdate({ updatedMap: { nodes: [...nodes, newNode], edges: [...edges, newEdge] } });\r\n  //   },\r\n  //   [setNodes, setEdges, onNodeChange, onUpdate, nodes, edges]\r\n  // );\r\n\r\n  // React.useEffect(() => {\r\n  //   if (data) {\r\n  //     const rootNode = {\r\n  //       id: 'root',\r\n  //       type: 'custom',\r\n  //       position: { x: 0, y: 0 },\r\n  //       data: { label: data.name, onNodeChange: (label) => onNodeChange('root', label) },\r\n  //     };\r\n  //     setNodes([rootNode]);\r\n  //   }\r\n  // }, [data, setNodes, onNodeChange]);\r\n\r\n  // const onDragOver = useCallback((event) => {\r\n  //   event.preventDefault();\r\n  //   event.dataTransfer.dropEffect = 'move';\r\n  // }, []);\r\n\r\n  // const onDrop = useCallback(\r\n  //   (event) => {\r\n  //     event.preventDefault();\r\n\r\n  //     const reactFlowBounds = reactFlowWrapper.current.getBoundingClientRect();\r\n  //     const type = event.dataTransfer.getData('application/reactflow');\r\n\r\n  //     if (typeof type === 'undefined' || !type) {\r\n  //       return;\r\n  //     }\r\n\r\n  //     const position = reactFlowInstance.current.project({\r\n  //       x: event.clientX - reactFlowBounds.left,\r\n  //       y: event.clientY - reactFlowBounds.top,\r\n  //     });\r\n  //     const newNode = {\r\n  //       id: `node-${Date.now()}`,\r\n  //       type,\r\n  //       position,\r\n  //       data: { label: `${type} node`, onNodeChange: (label) => onNodeChange(`node-${Date.now()}`, label) },\r\n  //     };\r\n\r\n  //     setNodes((nds) => nds.concat(newNode));\r\n  //   },\r\n  //   [setNodes, onNodeChange]\r\n  // );\r\n  // const handleNodeClick = (event, node) => {\r\n  //   // Handle node click for editing\r\n  //   setEditingNode(node);\r\n  // };\r\n\r\n  // const handleEditSubmit = (e) => {\r\n  //   e.preventDefault();\r\n  //   const updatedNode = {\r\n  //     ...editingNode,\r\n  //     data: {\r\n  //       ...editingNode.data,\r\n  //       label: e.target.elements.nodeName.value,\r\n  //       note: e.target.elements.nodeNote.value,\r\n  //     },\r\n  //   };\r\n  //   setNodes((nds) => nds.map((node) => (node.id === updatedNode.id ? updatedNode : node)));\r\n  //   onUpdate({ updatedNode });\r\n  //   setEditingNode(null);\r\n  // };\r\n\r\n  // const handleAddChild = () => {\r\n  //   const newChildId = `${editingNode.id}-child-${Date.now()}`;\r\n  //   const newChild = {\r\n  //     id: newChildId,\r\n  //     type: 'custom',\r\n  //     position: { x: editingNode.position.x + 200, y: editingNode.position.y },\r\n  //     data: { label: 'New Child', note: '' },\r\n  //   };\r\n  //   const newEdge = { id: `${editingNode.id}-${newChildId}`, source: editingNode.id, target: newChildId, type: 'smoothstep' };\r\n    \r\n  //   setNodes((nds) => [...nds, newChild]);\r\n  //   setEdges((eds) => [...eds, newEdge]);\r\n  //   onUpdate({ updatedNode: newChild });\r\n  // };\r\n\r\n  // Saving Mind Map as PNG file\r\n  const handleSave = useCallback(() => {\r\n    if (reactFlowInstance.current && reactFlowWrapper.current) {\r\n      const flow = reactFlowInstance.current;\r\n      const { nodes, edges } = flow.toObject();\r\n\r\n      // Calculate the bounding box of all nodes\r\n      const bbox = nodes.reduce(\r\n        (acc, node) => {\r\n          acc.left = Math.min(acc.left, node.position.x);\r\n          acc.top = Math.min(acc.top, node.position.y);\r\n          acc.right = Math.max(acc.right, node.position.x + (node.width || 150));\r\n          acc.bottom = Math.max(acc.bottom, node.position.y + (node.height || 50));\r\n          return acc;\r\n        },\r\n        { left: Infinity, top: Infinity, right: -Infinity, bottom: -Infinity }\r\n      );\r\n\r\n      // Add padding\r\n      const padding = 50;\r\n      bbox.left -= padding;\r\n      bbox.top -= padding;\r\n      bbox.right += padding;\r\n      bbox.bottom += padding;\r\n\r\n      const width = bbox.right - bbox.left;\r\n      const height = bbox.bottom - bbox.top;\r\n\r\n      // Calculate the zoom level to fit the entire mind map\r\n      const xZoom = reactFlowWrapper.current.offsetWidth / width;\r\n      const yZoom = reactFlowWrapper.current.offsetHeight / height;\r\n      const zoomLevel = Math.min(xZoom, yZoom, 1); // Limit zoom to 0.75 to prevent excessive enlargement\r\n\r\n      // Set the viewport to include all nodes\r\n      flow.setViewport(\r\n        {\r\n          x: -bbox.left * zoomLevel,\r\n          y: -bbox.top * zoomLevel,\r\n          zoom: zoomLevel,\r\n        },\r\n        { duration: 0 }\r\n      );\r\n\r\n      // Wait for the viewport change to take effect\r\n      setTimeout(() => {\r\n        toPng(reactFlowWrapper.current, {\r\n          backgroundColor: '#ffffff',\r\n          width: reactFlowWrapper.current.offsetWidth,\r\n          height: reactFlowWrapper.current.offsetHeight,\r\n        })\r\n          .then((dataUrl) => {\r\n            const link = document.createElement('a');\r\n            link.download = 'mind-map.png';\r\n            link.href = dataUrl;\r\n            link.click();\r\n          })\r\n          .catch((error) => {\r\n            console.error('Error saving mind map:', error);\r\n          });\r\n      }, 100);\r\n    }\r\n  }, []);\r\n\r\n// const toggleConnectionMode = () => {\r\n//   setConnectionMode(prev => prev ? null : 'connect');\r\n// };\r\n    \r\n  //     toPng(reactFlowWrapper.current, { \r\n  //       cacheBust: true, \r\n  //       backgroundColor: '#ffffff',\r\n  //       width: width,\r\n  //       height: height,\r\n  //       style: {\r\n  //         width: `${width}px`,\r\n  //         height: `${height}px`,\r\n  //       },\r\n  //     })\r\n  //       .then((dataUrl) => {\r\n  //         const link = document.createElement('a');\r\n  //         link.download = 'mind-map.png';\r\n  //         link.href = dataUrl;\r\n  //         link.click();\r\n  //       })\r\n  //       .catch((error) => {\r\n  //         console.error('Error saving mind map:', error);\r\n  //       });\r\n  //   }\r\n  // }, []);\r\n\r\n  console.log('MindMap component received data:', data)\r\n  return (\r\n    <div ref={reactFlowWrapper} style={{ width: '100%', height: '500px', border: '1px solid black' }}>\r\n      <ReactFlow\r\n        nodes={nodes}\r\n        edges={edges}\r\n        onNodesChange={onNodesChange}\r\n        onNodesDelete={onNodesDelete}\r\n        onEdgesChange={onEdgesChange}\r\n        onConnect={onConnect}\r\n        // onNodeClick={handleNodeClick}\r\n        // nodeTypes={nodeTypes}\r\n        onInit={(instance) => (reactFlowInstance.current = instance)}\r\n        onLoad={onLoad}\r\n        // onDrop={onDrop}\r\n        // onDragOver={onDragOver}\r\n        fitView\r\n      >\r\n        <Controls />\r\n        <MiniMap\r\n          nodeColor={(n) => {\r\n            if (n.type === \"input\") return \"blue\";\r\n\r\n            return \"#FFCC00\";\r\n          }}\r\n        />\r\n        <Background variant=\"dots\" gap={12} size={1} />\r\n      </ReactFlow>\r\n\r\n      <div style={{ position: 'absolute', top: 10, left: 10 }}>\r\n        <input \r\n          type=\"text\"\r\n          onChange={(e) => setName(e.target.value)}\r\n          name=\"title\"\r\n        />\r\n        <button type=\"button\" onClick={addNode}>\r\n          Add Node\r\n        </button>\r\n        <button type=\"button\" onClick={handleNewMindMap}>\r\n          New Mind Map\r\n        </button>\r\n      </div>\r\n      \r\n      {showConfirmation && (\r\n        <div style={{ \r\n          position: 'absolute', \r\n          top: '50%', \r\n          left: '50%', \r\n          transform: 'translate(-50%, -50%)',\r\n          background: 'white',\r\n          padding: '20px',\r\n          borderRadius: '5px',\r\n          boxShadow: '0 0 10px rgba(0,0,0,0.1)',\r\n          zIndex: 1000\r\n        }}>\r\n          <p>Are you sure you want to create a new mind map? All current data will be lost.</p>\r\n          <button onClick={() => handleConfirmation(true)}>Yes</button>\r\n          <button onClick={() => handleConfirmation(false)}>No</button>\r\n        </div>\r\n      )}\r\n\r\n      {/* {editingNode && (\r\n        <div style={{ position: 'absolute', top:10, right:10, background: 'white', padding:10, zIndex: 1000}}>\r\n          <form onSubmit={handleEditSubmit}>\r\n            <input name=\"nodeName\" defaultValue={editingNode.data.label} />\r\n            <textarea name=\"nodeNote\" defaultValue={editingNode.data.note || ''} />\r\n            <button type=\"submit\">Update</button>\r\n          </form> \r\n        </div>\r\n      )} */}\r\n      {/* {editingNode && (\r\n        <div style={{ position: 'absolute', top: 10, right: 10, background: 'white', padding: 10, zIndex: 1000, borderRadius: '5px', boxShadow: '0 0 10px rgba(0,0,0,0.1)' }}>\r\n          <form onSubmit={handleEditSubmit}>\r\n            <div style={{ marginBottom: '10px' }}>\r\n              <label htmlFor=\"nodeName\">Node Name:</label>\r\n              <input id=\"nodeName\" name=\"nodeName\" defaultValue={editingNode.data.label} style={{ width: '100%' }} />\r\n            </div>\r\n            <div style={{ marginBottom: '10px' }}>\r\n              <label htmlFor=\"nodeNote\">Note:</label>\r\n              <textarea id=\"nodeNote\" name=\"nodeNote\" defaultValue={editingNode.data.note || ''} style={{ width: '100%', height: '60px' }} />\r\n            </div>\r\n            <div style={{ display: 'flex', justifyContent: 'space-between' }}>\r\n              <button type=\"submit\">Update</button>\r\n              <button type=\"button\" onClick={handleAddChild}>Add Child</button>\r\n              <button type=\"button\" onClick={() => setEditingNode(null)}>Cancel</button>\r\n            </div>\r\n          </form>\r\n        </div>\r\n      )} */}\r\n      {/* <div style={{ position: 'absolute', bottom: 10, left: 10 }}>\r\n        <button onClick={toggleConnectionMode}>\r\n          {connectionMode ? 'Exit Connection Mode' : 'Enter Connection Mode'}\r\n        </button>\r\n      </div> */}\r\n      <button onClick={handleSave} style={{ position: 'absolute', bottom: 10, right: 10 }} >Save as PNG</button>\r\n    </div>\r\n  );\r\n}\r\n\r\n// Helper function to convert mind map data to React Flow format\r\nfunction convertToReactFlowFormat(data, parentId = null, x = 0, y = 0) {\r\n  const nodes = [];\r\n  const edges = [];\r\n\r\n  const nodeWidth = 150;\r\n  const nodeHeight = 50;\r\n  const horizontalSpacing = 200;\r\n  const verticalSpacing = 100;\r\n\r\n  function processNode(node, parentId, x , y) {\r\n    // const id = `${level}-${index}-${node.name.replace(/\\s+/g, '-').toLowerCase()}`;\r\n    // const x = level * horizontalSpacing;\r\n    // const y = index * verticalSpacing;    \r\n    const id = `${node.name.replace(/\\s+/g, '-').toLowerCase()}-${Date.now()}`;\r\n\r\n    nodes.push({\r\n      id,\r\n      type: 'custom',\r\n      position: { x, y },\r\n      data: { \r\n        label: node.name, \r\n        note: node.attributes?.note, \r\n        onNodeChange: () => {}, // This will be set in the MindMap Component\r\n      },\r\n      style: { width: nodeWidth, height: nodeHeight },\r\n    });\r\n\r\n    if (parentId) {\r\n      edges.push({\r\n        id: `${parentId}-${id}`, \r\n        source: parentId, \r\n        target: id, \r\n        // type: 'smoothstep', \r\n        markerEnd: { type: MarkerType.ArrowClosed } });\r\n    }\r\n\r\n    if (node.children) {\r\n      node.children.forEach((child, index) => {\r\n        const childX = x + horizontalSpacing;\r\n        const childY = y + (index - (node.children.length - 1) / 2) * verticalSpacing;\r\n        const { childNodes, childEdges } = processNode(child, id, childX, childY);\r\n        nodes.push(...childNodes);\r\n        edges.push(...childEdges);\r\n      });\r\n    }\r\n\r\n    return { childNodes: nodes, childEdges: edges };\r\n  }\r\n\r\n  const { childNodes, childEdges } = processNode(data, parentId, x, y);\r\n  return { nodes: childNodes, edges: childEdges };\r\n}\r\n\r\nexport default MindMap;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}