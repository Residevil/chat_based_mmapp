{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\alexa\\\\chat_based_mmapp\\\\frontend\\\\src\\\\components\\\\MindMap.js\",\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$();\nimport React, { useState, useCallback, useRef } from 'react';\nimport ReactFlow, { Controls, Background, useNodesState, useEdgesState, MiniMap, addEdge, MarkerType } from 'reactflow';\nimport 'reactflow/dist/style.css';\nimport { toPng } from 'html-to-image';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst initialNodes = [{\n  id: \"1\",\n  type: \"input\",\n  data: {\n    label: \"Mind Map\"\n  },\n  position: {\n    x: 0,\n    y: 0\n  }\n}];\n\n// Custom node component\nconst CustomNode = ({\n  id,\n  data,\n  isConnectable\n}) => {\n  _s();\n  const [isEditing, setIsEditing] = useState(false);\n  const [label, setLabel] = useState(data.label);\n  const handleDoubleClick = () => {\n    setIsEditing(true);\n  };\n  const handleBlur = () => {\n    setIsEditing(false);\n    data.onNodesChange(label);\n  };\n\n  // const handleAddChild = () => {\n  //   data.onAddChild(id)\n  // }\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    style: {\n      padding: '10px',\n      border: '1px solid #ddd',\n      borderRadius: '5px',\n      background: 'white',\n      minWidth: '150px'\n    },\n    onDoubleClick: handleDoubleClick,\n    children: [isEditing ? /*#__PURE__*/_jsxDEV(\"input\", {\n      type: \"text\",\n      value: label,\n      onChange: e => setLabel(e.target.value),\n      onBlur: handleBlur,\n      autoFocus: true\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 54,\n      columnNumber: 9\n    }, this) : /*#__PURE__*/_jsxDEV(\"div\", {\n      children: label\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 62,\n      columnNumber: 9\n    }, this), data.note && /*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        fontSize: '0.8em',\n        color: '#666'\n      },\n      children: data.note\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 64,\n      columnNumber: 21\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 43,\n    columnNumber: 5\n  }, this);\n};\n_s(CustomNode, \"Tg9Xh/Z+ACc9XnAD07WHfiY+uiA=\");\n_c = CustomNode;\nconst nodeTypes = {\n  custom: CustomNode\n};\nfunction MindMap({\n  data,\n  onUpdate\n}) {\n  _s2();\n  const [nodes, setNodes, onNodesChange] = useNodesState([]);\n  const [edges, setEdges, onEdgesChange] = useEdgesState([]);\n  const [name, setName] = useState(\"\");\n  // const [translate, setTranslate] = useState({ x: 300, y: 50 });\n  // const [editingNode, setEditingNode] = useState(null);\n  const reactFlowWrapper = useRef(null);\n  const reactFlowInstance = useRef(null);\n  // const [connectionMode, setConnectionMode] = useState(null);\n\n  // Convert mind map data to React Flow format\n  React.useEffect(() => {\n    if (data) {\n      const {\n        nodes: newNodes,\n        edges: newEdges\n      } = convertToReactFlowFormat(data);\n      setNodes(newNodes);\n      setEdges(newEdges);\n    }\n  }, [data, setNodes, setEdges]);\n  const addNode = () => {\n    setNodes(e => e.concat({\n      id: (e.length + 1).toString(),\n      data: {\n        label: `${name}`\n      },\n      position: {\n        x: Math.random() * window.innerWidth,\n        y: Math.random() * window.innerHeight\n      }\n    }));\n  };\n  const onConnect = useCallback(params => {\n    const newEdge = {\n      ...params,\n      type: 'smoothstep',\n      markerEnd: {\n        type: MarkerType.ArrowClosed\n      }\n    };\n    setEdges(eds => addEdge(newEdge, eds));\n    onUpdate({\n      updatedEdges: [...edges, newEdge]\n    });\n  }, [setEdges, edges, onUpdate]);\n  const onNodeChange = useCallback((nodeId, newLabel) => {\n    setNodes(nds => nds.map(node => node.id === nodeId ? {\n      ...node,\n      data: {\n        ...node.data,\n        label: newLabel\n      }\n    } : node));\n    onUpdate({\n      updatedNode: {\n        id: nodeId,\n        data: {\n          label: newLabel\n        }\n      }\n    });\n  }, [setNodes, onUpdate]);\n\n  // const onAddChild = useCallback(\n  //   (parentId) => {\n  //     const parentNode = nodes.find(node => node.id === parentId);\n  //     if (!parentNode) return;\n\n  //     const newNodeId = `node-${Date.now()}`;\n  //     const newNode = {\n  //       id: newNodeId,\n  //       type: 'custom',\n  //       position: {\n  //         x: parentNode.position.x + 200,\n  //         y: parentNode.position.y + 100,\n  //       },\n  //       data: { \n  //         label: 'New Node', \n  //         onNodeChange: onNodeChange, \n  //         onAddChild: onAddChild, \n  //       },\n  //     };\n  //     const newEdge = {\n  //       id: `edge-${parentId}-${newNodeId}`,\n  //       source: parentId,\n  //       target: newNodeId,\n  //       type: 'smoothstep',\n  //       markerEnd: { type: MarkerType.ArrowClosed },\n  //     };\n\n  //     setNodes((nds) => [...nds, newNode]);\n  //     setEdges((eds) => [...eds, newEdge]);\n  //     onUpdate({ updatedMap: { nodes: [...nodes, newNode], edges: [...edges, newEdge] } });\n  //   },\n  //   [setNodes, setEdges, onNodeChange, onUpdate, nodes, edges]\n  // );\n\n  // React.useEffect(() => {\n  //   if (data) {\n  //     const rootNode = {\n  //       id: 'root',\n  //       type: 'custom',\n  //       position: { x: 0, y: 0 },\n  //       data: { label: data.name, onNodeChange: (label) => onNodeChange('root', label) },\n  //     };\n  //     setNodes([rootNode]);\n  //   }\n  // }, [data, setNodes, onNodeChange]);\n\n  // const onDragOver = useCallback((event) => {\n  //   event.preventDefault();\n  //   event.dataTransfer.dropEffect = 'move';\n  // }, []);\n\n  // const onDrop = useCallback(\n  //   (event) => {\n  //     event.preventDefault();\n\n  //     const reactFlowBounds = reactFlowWrapper.current.getBoundingClientRect();\n  //     const type = event.dataTransfer.getData('application/reactflow');\n\n  //     if (typeof type === 'undefined' || !type) {\n  //       return;\n  //     }\n\n  //     const position = reactFlowInstance.current.project({\n  //       x: event.clientX - reactFlowBounds.left,\n  //       y: event.clientY - reactFlowBounds.top,\n  //     });\n  //     const newNode = {\n  //       id: `node-${Date.now()}`,\n  //       type,\n  //       position,\n  //       data: { label: `${type} node`, onNodeChange: (label) => onNodeChange(`node-${Date.now()}`, label) },\n  //     };\n\n  //     setNodes((nds) => nds.concat(newNode));\n  //   },\n  //   [setNodes, onNodeChange]\n  // );\n  // const handleNodeClick = (event, node) => {\n  //   // Handle node click for editing\n  //   setEditingNode(node);\n  // };\n\n  // const handleEditSubmit = (e) => {\n  //   e.preventDefault();\n  //   const updatedNode = {\n  //     ...editingNode,\n  //     data: {\n  //       ...editingNode.data,\n  //       label: e.target.elements.nodeName.value,\n  //       note: e.target.elements.nodeNote.value,\n  //     },\n  //   };\n  //   setNodes((nds) => nds.map((node) => (node.id === updatedNode.id ? updatedNode : node)));\n  //   onUpdate({ updatedNode });\n  //   setEditingNode(null);\n  // };\n\n  // const handleAddChild = () => {\n  //   const newChildId = `${editingNode.id}-child-${Date.now()}`;\n  //   const newChild = {\n  //     id: newChildId,\n  //     type: 'custom',\n  //     position: { x: editingNode.position.x + 200, y: editingNode.position.y },\n  //     data: { label: 'New Child', note: '' },\n  //   };\n  //   const newEdge = { id: `${editingNode.id}-${newChildId}`, source: editingNode.id, target: newChildId, type: 'smoothstep' };\n\n  //   setNodes((nds) => [...nds, newChild]);\n  //   setEdges((eds) => [...eds, newEdge]);\n  //   onUpdate({ updatedNode: newChild });\n  // };\n\n  // Saving Mind Map as PNG file\n  const handleSave = useCallback(() => {\n    if (reactFlowInstance.current && reactFlowWrapper.current) {\n      const flow = reactFlowInstance.current;\n      const {\n        nodes,\n        edges\n      } = flow.toObject();\n\n      // Calculate the bounding box of all nodes\n      const bbox = nodes.reduce((acc, node) => {\n        acc.left = Math.min(acc.left, node.position.x);\n        acc.top = Math.min(acc.top, node.position.y);\n        acc.right = Math.max(acc.right, node.position.x + (node.width || 150));\n        acc.bottom = Math.max(acc.bottom, node.position.y + (node.height || 50));\n        return acc;\n      }, {\n        left: Infinity,\n        top: Infinity,\n        right: -Infinity,\n        bottom: -Infinity\n      });\n\n      // Add padding\n      const padding = 50;\n      bbox.left -= padding;\n      bbox.top -= padding;\n      bbox.right += padding;\n      bbox.bottom += padding;\n      const width = bbox.right - bbox.left;\n      const height = bbox.bottom - bbox.top;\n\n      // Calculate the zoom level to fit the entire mind map\n      const xZoom = reactFlowWrapper.current.offsetWidth / width;\n      const yZoom = reactFlowWrapper.current.offsetHeight / height;\n      const zoomLevel = Math.min(xZoom, yZoom, 1); // Limit zoom to 0.75 to prevent excessive enlargement\n\n      // Set the viewport to include all nodes\n      flow.setViewport({\n        x: -bbox.left * zoomLevel,\n        y: -bbox.top * zoomLevel,\n        zoom: zoomLevel\n      }, {\n        duration: 0\n      });\n\n      // Wait for the viewport change to take effect\n      setTimeout(() => {\n        toPng(reactFlowWrapper.current, {\n          backgroundColor: '#ffffff',\n          width: reactFlowWrapper.current.offsetWidth,\n          height: reactFlowWrapper.current.offsetHeight\n        }).then(dataUrl => {\n          const link = document.createElement('a');\n          link.download = 'mind-map.png';\n          link.href = dataUrl;\n          link.click();\n        }).catch(error => {\n          console.error('Error saving mind map:', error);\n        });\n      }, 100);\n    }\n  }, []);\n\n  // const toggleConnectionMode = () => {\n  //   setConnectionMode(prev => prev ? null : 'connect');\n  // };\n\n  //     toPng(reactFlowWrapper.current, { \n  //       cacheBust: true, \n  //       backgroundColor: '#ffffff',\n  //       width: width,\n  //       height: height,\n  //       style: {\n  //         width: `${width}px`,\n  //         height: `${height}px`,\n  //       },\n  //     })\n  //       .then((dataUrl) => {\n  //         const link = document.createElement('a');\n  //         link.download = 'mind-map.png';\n  //         link.href = dataUrl;\n  //         link.click();\n  //       })\n  //       .catch((error) => {\n  //         console.error('Error saving mind map:', error);\n  //       });\n  //   }\n  // }, []);\n\n  console.log('MindMap component received data:', data);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    ref: reactFlowWrapper,\n    style: {\n      width: '100%',\n      height: '500px',\n      border: '1px solid black'\n    },\n    children: [/*#__PURE__*/_jsxDEV(ReactFlow, {\n      nodes: nodes,\n      edges: edges\n      // onEdgesChange={onEdgesChange}\n      ,\n      onConnect: onConnect,\n      onNodeChange: onNodeChange,\n      fitView: true,\n      children: [/*#__PURE__*/_jsxDEV(MiniMap, {\n        nodeColor: n => {\n          if (n.type === \"input\") return \"blue\";\n          return \"#FFCC00\";\n        }\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 352,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Controls, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 359,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Background, {\n        variant: \"white\",\n        gap: 12,\n        size: 1\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 360,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 344,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        onChange: e => setName(e.target.value),\n        name: \"title\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 363,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        type: \"button\",\n        onClick: addNode,\n        children: \"Add Node\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 368,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 362,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: handleSave,\n      style: {\n        position: 'absolute',\n        bottom: 10,\n        right: 10\n      },\n      children: \"Save as PNG\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 407,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 326,\n    columnNumber: 5\n  }, this);\n}\n\n// Helper function to convert mind map data to React Flow format\n_s2(MindMap, \"M4Ea2Dzwz0MBkVQOYeaqupq0akg=\", false, function () {\n  return [useNodesState, useEdgesState];\n});\n_c2 = MindMap;\nfunction convertToReactFlowFormat(data, parentId = null, x = 0, y = 0) {\n  const nodes = [];\n  const edges = [];\n  const nodeWidth = 150;\n  const nodeHeight = 50;\n  const horizontalSpacing = 200;\n  const verticalSpacing = 100;\n  function processNode(node, parentId, x, y) {\n    var _node$attributes;\n    // const id = `${level}-${index}-${node.name.replace(/\\s+/g, '-').toLowerCase()}`;\n    // const x = level * horizontalSpacing;\n    // const y = index * verticalSpacing;    \n    const id = `${node.name.replace(/\\s+/g, '-').toLowerCase()}-${Date.now()}`;\n    nodes.push({\n      id,\n      type: 'custom',\n      position: {\n        x,\n        y\n      },\n      data: {\n        label: node.name,\n        note: (_node$attributes = node.attributes) === null || _node$attributes === void 0 ? void 0 : _node$attributes.note,\n        onNodeChange: () => {} // This will be set in the MindMap Component\n        // onAddChild: () => {}, // This will be set in the MindMap Component\n      },\n      style: {\n        width: nodeWidth,\n        height: nodeHeight\n      }\n    });\n    if (parentId) {\n      edges.push({\n        id: `${parentId}-${id}`,\n        source: parentId,\n        target: id,\n        type: 'smoothstep',\n        markerEnd: {\n          type: MarkerType.ArrowClosed\n        }\n      });\n    }\n    if (node.children) {\n      node.children.forEach((child, index) => {\n        const childX = x + horizontalSpacing;\n        const childY = y + (index - (node.children.length - 1) / 2) * verticalSpacing;\n        const {\n          childNodes,\n          childEdges\n        } = processNode(child, id, childX, childY);\n        nodes.push(...childNodes);\n        edges.push(...childEdges);\n      });\n    }\n    return {\n      childNodes: nodes,\n      childEdges: edges\n    };\n  }\n  const {\n    childNodes,\n    childEdges\n  } = processNode(data, parentId, x, y);\n  return {\n    nodes: childNodes,\n    edges: childEdges\n  };\n}\nexport default MindMap;\nvar _c, _c2;\n$RefreshReg$(_c, \"CustomNode\");\n$RefreshReg$(_c2, \"MindMap\");","map":{"version":3,"names":["React","useState","useCallback","useRef","ReactFlow","Controls","Background","useNodesState","useEdgesState","MiniMap","addEdge","MarkerType","toPng","jsxDEV","_jsxDEV","initialNodes","id","type","data","label","position","x","y","CustomNode","isConnectable","_s","isEditing","setIsEditing","setLabel","handleDoubleClick","handleBlur","onNodesChange","style","padding","border","borderRadius","background","minWidth","onDoubleClick","children","value","onChange","e","target","onBlur","autoFocus","fileName","_jsxFileName","lineNumber","columnNumber","note","fontSize","color","_c","nodeTypes","custom","MindMap","onUpdate","_s2","nodes","setNodes","edges","setEdges","onEdgesChange","name","setName","reactFlowWrapper","reactFlowInstance","useEffect","newNodes","newEdges","convertToReactFlowFormat","addNode","concat","length","toString","Math","random","window","innerWidth","innerHeight","onConnect","params","newEdge","markerEnd","ArrowClosed","eds","updatedEdges","onNodeChange","nodeId","newLabel","nds","map","node","updatedNode","handleSave","current","flow","toObject","bbox","reduce","acc","left","min","top","right","max","width","bottom","height","Infinity","xZoom","offsetWidth","yZoom","offsetHeight","zoomLevel","setViewport","zoom","duration","setTimeout","backgroundColor","then","dataUrl","link","document","createElement","download","href","click","catch","error","console","log","ref","fitView","nodeColor","n","variant","gap","size","onClick","_c2","parentId","nodeWidth","nodeHeight","horizontalSpacing","verticalSpacing","processNode","_node$attributes","replace","toLowerCase","Date","now","push","attributes","source","forEach","child","index","childX","childY","childNodes","childEdges","$RefreshReg$"],"sources":["C:/Users/alexa/chat_based_mmapp/frontend/src/components/MindMap.js"],"sourcesContent":["import React, { useState, useCallback, useRef } from 'react';\r\nimport ReactFlow, {\r\n  Controls,\r\n  Background,\r\n  useNodesState,\r\n  useEdgesState,\r\n  MiniMap,\r\n  addEdge,\r\n  MarkerType,\r\n} from 'reactflow';\r\nimport 'reactflow/dist/style.css';\r\nimport { toPng } from 'html-to-image';\r\n\r\n\r\nconst initialNodes = [\r\n  {\r\n    id: \"1\",\r\n    type: \"input\",\r\n    data: { label: \"Mind Map\" },\r\n    position: { x: 0, y: 0 },\r\n  },\r\n];\r\n\r\n// Custom node component\r\nconst CustomNode = ({ id, data, isConnectable }) => {\r\n  const [isEditing, setIsEditing] = useState(false);\r\n  const [label, setLabel] = useState(data.label);\r\n\r\n  const handleDoubleClick = () => {\r\n    setIsEditing(true);\r\n  }\r\n\r\n  const handleBlur =() => {\r\n    setIsEditing(false);\r\n    data.onNodesChange(label);\r\n  }\r\n\r\n  // const handleAddChild = () => {\r\n  //   data.onAddChild(id)\r\n  // }\r\n  \r\n  return (\r\n    <div\r\n      style={{\r\n        padding: '10px',\r\n        border: '1px solid #ddd',\r\n        borderRadius: '5px',\r\n        background: 'white',\r\n        minWidth: '150px',\r\n      }}\r\n      onDoubleClick={handleDoubleClick}\r\n    >\r\n      {isEditing ? (\r\n        <input\r\n          type=\"text\"\r\n          value={label}\r\n          onChange={(e) => setLabel(e.target.value)}\r\n          onBlur={handleBlur}\r\n          autoFocus\r\n        />\r\n      ) : (\r\n        <div>{label}</div>\r\n      )}\r\n      {data.note && <div style={{ fontSize: '0.8em', color: '#666' }}>{data.note}</div>}\r\n    </div>\r\n  );\r\n};\r\n\r\nconst nodeTypes = {\r\n  custom: CustomNode,\r\n};\r\n\r\nfunction MindMap({ data, onUpdate }) {\r\n  const [nodes, setNodes, onNodesChange] = useNodesState([]);\r\n  const [edges, setEdges, onEdgesChange] = useEdgesState([]);\r\n  const [name, setName] = useState(\"\");\r\n  // const [translate, setTranslate] = useState({ x: 300, y: 50 });\r\n  // const [editingNode, setEditingNode] = useState(null);\r\n  const reactFlowWrapper = useRef(null);\r\n  const reactFlowInstance = useRef(null);\r\n  // const [connectionMode, setConnectionMode] = useState(null);\r\n\r\n  // Convert mind map data to React Flow format\r\n  React.useEffect(() => {\r\n    if (data) {\r\n      const { nodes: newNodes, edges: newEdges } = convertToReactFlowFormat(data);\r\n      setNodes(newNodes);\r\n      setEdges(newEdges);\r\n    }\r\n  }, [data, setNodes, setEdges]);\r\n\r\n  const addNode = () => {\r\n    setNodes((e) =>\r\n      e.concat({\r\n        id: (e.length + 1).toString(),\r\n        data: { label: `${name}` },\r\n        position: {\r\n          x: Math.random() * window.innerWidth,\r\n          y: Math.random() * window.innerHeight,\r\n        },\r\n      })\r\n    );\r\n  };\r\n\r\n  const onConnect = useCallback((params) => {\r\n    const newEdge = { ...params, type: 'smoothstep', markerEnd: { type: MarkerType.ArrowClosed } };\r\n    setEdges((eds) => addEdge(newEdge, eds));\r\n    onUpdate({ updatedEdges: [...edges, newEdge] });\r\n  }, [setEdges, edges, onUpdate])\r\n\r\n  const onNodeChange = useCallback(\r\n    (nodeId, newLabel) => {\r\n      setNodes((nds) =>\r\n        nds.map((node) =>\r\n          node.id === nodeId ? { ...node, data: { ...node.data, label: newLabel } } : node\r\n        )\r\n      );\r\n      onUpdate({ updatedNode: { id: nodeId, data: { label: newLabel }}});\r\n    },\r\n    [setNodes, onUpdate]\r\n  );\r\n\r\n  // const onAddChild = useCallback(\r\n  //   (parentId) => {\r\n  //     const parentNode = nodes.find(node => node.id === parentId);\r\n  //     if (!parentNode) return;\r\n\r\n  //     const newNodeId = `node-${Date.now()}`;\r\n  //     const newNode = {\r\n  //       id: newNodeId,\r\n  //       type: 'custom',\r\n  //       position: {\r\n  //         x: parentNode.position.x + 200,\r\n  //         y: parentNode.position.y + 100,\r\n  //       },\r\n  //       data: { \r\n  //         label: 'New Node', \r\n  //         onNodeChange: onNodeChange, \r\n  //         onAddChild: onAddChild, \r\n  //       },\r\n  //     };\r\n  //     const newEdge = {\r\n  //       id: `edge-${parentId}-${newNodeId}`,\r\n  //       source: parentId,\r\n  //       target: newNodeId,\r\n  //       type: 'smoothstep',\r\n  //       markerEnd: { type: MarkerType.ArrowClosed },\r\n  //     };\r\n\r\n  //     setNodes((nds) => [...nds, newNode]);\r\n  //     setEdges((eds) => [...eds, newEdge]);\r\n  //     onUpdate({ updatedMap: { nodes: [...nodes, newNode], edges: [...edges, newEdge] } });\r\n  //   },\r\n  //   [setNodes, setEdges, onNodeChange, onUpdate, nodes, edges]\r\n  // );\r\n\r\n  // React.useEffect(() => {\r\n  //   if (data) {\r\n  //     const rootNode = {\r\n  //       id: 'root',\r\n  //       type: 'custom',\r\n  //       position: { x: 0, y: 0 },\r\n  //       data: { label: data.name, onNodeChange: (label) => onNodeChange('root', label) },\r\n  //     };\r\n  //     setNodes([rootNode]);\r\n  //   }\r\n  // }, [data, setNodes, onNodeChange]);\r\n\r\n  // const onDragOver = useCallback((event) => {\r\n  //   event.preventDefault();\r\n  //   event.dataTransfer.dropEffect = 'move';\r\n  // }, []);\r\n\r\n  // const onDrop = useCallback(\r\n  //   (event) => {\r\n  //     event.preventDefault();\r\n\r\n  //     const reactFlowBounds = reactFlowWrapper.current.getBoundingClientRect();\r\n  //     const type = event.dataTransfer.getData('application/reactflow');\r\n\r\n  //     if (typeof type === 'undefined' || !type) {\r\n  //       return;\r\n  //     }\r\n\r\n  //     const position = reactFlowInstance.current.project({\r\n  //       x: event.clientX - reactFlowBounds.left,\r\n  //       y: event.clientY - reactFlowBounds.top,\r\n  //     });\r\n  //     const newNode = {\r\n  //       id: `node-${Date.now()}`,\r\n  //       type,\r\n  //       position,\r\n  //       data: { label: `${type} node`, onNodeChange: (label) => onNodeChange(`node-${Date.now()}`, label) },\r\n  //     };\r\n\r\n  //     setNodes((nds) => nds.concat(newNode));\r\n  //   },\r\n  //   [setNodes, onNodeChange]\r\n  // );\r\n  // const handleNodeClick = (event, node) => {\r\n  //   // Handle node click for editing\r\n  //   setEditingNode(node);\r\n  // };\r\n\r\n  // const handleEditSubmit = (e) => {\r\n  //   e.preventDefault();\r\n  //   const updatedNode = {\r\n  //     ...editingNode,\r\n  //     data: {\r\n  //       ...editingNode.data,\r\n  //       label: e.target.elements.nodeName.value,\r\n  //       note: e.target.elements.nodeNote.value,\r\n  //     },\r\n  //   };\r\n  //   setNodes((nds) => nds.map((node) => (node.id === updatedNode.id ? updatedNode : node)));\r\n  //   onUpdate({ updatedNode });\r\n  //   setEditingNode(null);\r\n  // };\r\n\r\n  // const handleAddChild = () => {\r\n  //   const newChildId = `${editingNode.id}-child-${Date.now()}`;\r\n  //   const newChild = {\r\n  //     id: newChildId,\r\n  //     type: 'custom',\r\n  //     position: { x: editingNode.position.x + 200, y: editingNode.position.y },\r\n  //     data: { label: 'New Child', note: '' },\r\n  //   };\r\n  //   const newEdge = { id: `${editingNode.id}-${newChildId}`, source: editingNode.id, target: newChildId, type: 'smoothstep' };\r\n    \r\n  //   setNodes((nds) => [...nds, newChild]);\r\n  //   setEdges((eds) => [...eds, newEdge]);\r\n  //   onUpdate({ updatedNode: newChild });\r\n  // };\r\n\r\n  // Saving Mind Map as PNG file\r\n  const handleSave = useCallback(() => {\r\n    if (reactFlowInstance.current && reactFlowWrapper.current) {\r\n      const flow = reactFlowInstance.current;\r\n      const { nodes, edges } = flow.toObject();\r\n\r\n    // Calculate the bounding box of all nodes\r\n    const bbox = nodes.reduce(\r\n      (acc, node) => {\r\n        acc.left = Math.min(acc.left, node.position.x);\r\n        acc.top = Math.min(acc.top, node.position.y);\r\n        acc.right = Math.max(acc.right, node.position.x + (node.width || 150));\r\n        acc.bottom = Math.max(acc.bottom, node.position.y + (node.height || 50));\r\n        return acc;\r\n      },\r\n      { left: Infinity, top: Infinity, right: -Infinity, bottom: -Infinity }\r\n    );\r\n\r\n    // Add padding\r\n    const padding = 50;\r\n    bbox.left -= padding;\r\n    bbox.top -= padding;\r\n    bbox.right += padding;\r\n    bbox.bottom += padding;\r\n\r\n    const width = bbox.right - bbox.left;\r\n    const height = bbox.bottom - bbox.top;\r\n\r\n    // Calculate the zoom level to fit the entire mind map\r\n    const xZoom = reactFlowWrapper.current.offsetWidth / width;\r\n    const yZoom = reactFlowWrapper.current.offsetHeight / height;\r\n    const zoomLevel = Math.min(xZoom, yZoom, 1); // Limit zoom to 0.75 to prevent excessive enlargement\r\n\r\n    // Set the viewport to include all nodes\r\n    flow.setViewport(\r\n      {\r\n        x: -bbox.left * zoomLevel,\r\n        y: -bbox.top * zoomLevel,\r\n        zoom: zoomLevel,\r\n      },\r\n      { duration: 0 }\r\n    );\r\n\r\n    // Wait for the viewport change to take effect\r\n    setTimeout(() => {\r\n      toPng(reactFlowWrapper.current, {\r\n        backgroundColor: '#ffffff',\r\n        width: reactFlowWrapper.current.offsetWidth,\r\n        height: reactFlowWrapper.current.offsetHeight,\r\n      })\r\n        .then((dataUrl) => {\r\n          const link = document.createElement('a');\r\n          link.download = 'mind-map.png';\r\n          link.href = dataUrl;\r\n          link.click();\r\n        })\r\n        .catch((error) => {\r\n          console.error('Error saving mind map:', error);\r\n        });\r\n    }, 100);\r\n  }\r\n}, []);\r\n\r\n// const toggleConnectionMode = () => {\r\n//   setConnectionMode(prev => prev ? null : 'connect');\r\n// };\r\n    \r\n  //     toPng(reactFlowWrapper.current, { \r\n  //       cacheBust: true, \r\n  //       backgroundColor: '#ffffff',\r\n  //       width: width,\r\n  //       height: height,\r\n  //       style: {\r\n  //         width: `${width}px`,\r\n  //         height: `${height}px`,\r\n  //       },\r\n  //     })\r\n  //       .then((dataUrl) => {\r\n  //         const link = document.createElement('a');\r\n  //         link.download = 'mind-map.png';\r\n  //         link.href = dataUrl;\r\n  //         link.click();\r\n  //       })\r\n  //       .catch((error) => {\r\n  //         console.error('Error saving mind map:', error);\r\n  //       });\r\n  //   }\r\n  // }, []);\r\n\r\n  console.log('MindMap component received data:', data)\r\n  return (\r\n    <div ref={reactFlowWrapper} style={{ width: '100%', height: '500px', border: '1px solid black' }}>\r\n      {/* <ReactFlow\r\n        nodes={nodes}\r\n        edges={edges}\r\n        onNodesChange={onNodesChange}\r\n        onEdgesChange={onEdgesChange}\r\n        onConnect={onConnect}\r\n        // onNodeClick={handleNodeClick}\r\n        nodeTypes={nodeTypes}\r\n        onInit={(instance) => (reactFlowInstance.current = instance)}\r\n        // onDrop={onDrop}\r\n        // onDragOver={onDragOver}\r\n        fitView\r\n      >\r\n        <Controls />\r\n        <Background variant=\"dots\" gap={12} size={1} />\r\n      </ReactFlow> */}\r\n\r\n      <ReactFlow \r\n        nodes={nodes} \r\n        edges={edges}\r\n        // onEdgesChange={onEdgesChange}\r\n        onConnect={onConnect}\r\n        onNodeChange={onNodeChange} \r\n        fitView\r\n      >\r\n        <MiniMap\r\n          nodeColor={(n) => {\r\n            if (n.type === \"input\") return \"blue\";\r\n\r\n            return \"#FFCC00\";\r\n          }}\r\n        />\r\n        <Controls />\r\n        <Background variant=\"white\" gap={12} size={1} />\r\n      </ReactFlow>\r\n      <div>\r\n        <input \r\n          type=\"text\"\r\n          onChange={(e) => setName(e.target.value)}\r\n          name=\"title\"\r\n        />\r\n        <button type=\"button\" onClick={addNode}>\r\n          Add Node\r\n        </button>\r\n      </div>\r\n\r\n\r\n      {/* {editingNode && (\r\n        <div style={{ position: 'absolute', top:10, right:10, background: 'white', padding:10, zIndex: 1000}}>\r\n          <form onSubmit={handleEditSubmit}>\r\n            <input name=\"nodeName\" defaultValue={editingNode.data.label} />\r\n            <textarea name=\"nodeNote\" defaultValue={editingNode.data.note || ''} />\r\n            <button type=\"submit\">Update</button>\r\n          </form> \r\n        </div>\r\n      )} */}\r\n      {/* {editingNode && (\r\n        <div style={{ position: 'absolute', top: 10, right: 10, background: 'white', padding: 10, zIndex: 1000, borderRadius: '5px', boxShadow: '0 0 10px rgba(0,0,0,0.1)' }}>\r\n          <form onSubmit={handleEditSubmit}>\r\n            <div style={{ marginBottom: '10px' }}>\r\n              <label htmlFor=\"nodeName\">Node Name:</label>\r\n              <input id=\"nodeName\" name=\"nodeName\" defaultValue={editingNode.data.label} style={{ width: '100%' }} />\r\n            </div>\r\n            <div style={{ marginBottom: '10px' }}>\r\n              <label htmlFor=\"nodeNote\">Note:</label>\r\n              <textarea id=\"nodeNote\" name=\"nodeNote\" defaultValue={editingNode.data.note || ''} style={{ width: '100%', height: '60px' }} />\r\n            </div>\r\n            <div style={{ display: 'flex', justifyContent: 'space-between' }}>\r\n              <button type=\"submit\">Update</button>\r\n              <button type=\"button\" onClick={handleAddChild}>Add Child</button>\r\n              <button type=\"button\" onClick={() => setEditingNode(null)}>Cancel</button>\r\n            </div>\r\n          </form>\r\n        </div>\r\n      )} */}\r\n      {/* <div style={{ position: 'absolute', bottom: 10, left: 10 }}>\r\n        <button onClick={toggleConnectionMode}>\r\n          {connectionMode ? 'Exit Connection Mode' : 'Enter Connection Mode'}\r\n        </button>\r\n      </div> */}\r\n      <button onClick={handleSave} style={{ position: 'absolute', bottom: 10, right: 10 }} >Save as PNG</button>\r\n    </div>\r\n  );\r\n}\r\n\r\n// Helper function to convert mind map data to React Flow format\r\nfunction convertToReactFlowFormat(data, parentId = null, x = 0, y = 0) {\r\n  const nodes = [];\r\n  const edges = [];\r\n\r\n  const nodeWidth = 150;\r\n  const nodeHeight = 50;\r\n  const horizontalSpacing = 200;\r\n  const verticalSpacing = 100;\r\n\r\n  function processNode(node, parentId, x , y) {\r\n    // const id = `${level}-${index}-${node.name.replace(/\\s+/g, '-').toLowerCase()}`;\r\n    // const x = level * horizontalSpacing;\r\n    // const y = index * verticalSpacing;    \r\n    const id = `${node.name.replace(/\\s+/g, '-').toLowerCase()}-${Date.now()}`;\r\n\r\n    nodes.push({\r\n      id,\r\n      type: 'custom',\r\n      position: { x, y },\r\n      data: { \r\n        label: node.name, \r\n        note: node.attributes?.note, \r\n        onNodeChange: () => {}, // This will be set in the MindMap Component\r\n        // onAddChild: () => {}, // This will be set in the MindMap Component\r\n      },\r\n      style: { width: nodeWidth, height: nodeHeight },\r\n    });\r\n\r\n    if (parentId) {\r\n      edges.push({\r\n        id: `${parentId}-${id}`, \r\n        source: parentId, \r\n        target: id, \r\n        type: 'smoothstep', \r\n        markerEnd: { type: MarkerType.ArrowClosed } });\r\n    }\r\n\r\n    if (node.children) {\r\n      node.children.forEach((child, index) => {\r\n        const childX = x + horizontalSpacing;\r\n        const childY = y + (index - (node.children.length - 1) / 2) * verticalSpacing;\r\n        const { childNodes, childEdges } = processNode(child, id, childX, childY);\r\n        nodes.push(...childNodes);\r\n        edges.push(...childEdges);\r\n      });\r\n    }\r\n\r\n    return { childNodes: nodes, childEdges: edges };\r\n  }\r\n\r\n  const { childNodes, childEdges } = processNode(data, parentId, x, y);\r\n  return { nodes: childNodes, edges: childEdges };\r\n}\r\n\r\nexport default MindMap;"],"mappings":"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C,EACD,CAAC9B,QAAQ,EAAEH,QAAQ,CACrB,CAAC;;EAED;EACA;EACA;EACA;;EAEA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;;EAEA;EACA;EACA;EACA;EACA;EACA;;EAEA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;;EAEA;EACA;EACA;EACA;;EAEA;EACA;EACA;;EAEA;EACA;;EAEA;EACA;EACA;;EAEA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;;EAEA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;;EAEA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;;EAEA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;;EAEA;EACA;EACA;EACA;;EAEA;EACA,MAAMsC,UAAU,GAAG7F,WAAW,CAAC,MAAM;IACnC,IAAIiE,iBAAiB,CAAC6B,OAAO,IAAI9B,gBAAgB,CAAC8B,OAAO,EAAE;MACzD,MAAMC,IAAI,GAAG9B,iBAAiB,CAAC6B,OAAO;MACtC,MAAM;QAAErC,KAAK;QAAEE;MAAM,CAAC,GAAGoC,IAAI,CAACC,QAAQ,CAAC,CAAC;;MAE1C;MACA,MAAMC,IAAI,GAAGxC,KAAK,CAACyC,MAAM,CACvB,CAACC,GAAG,EAAER,IAAI,KAAK;QACbQ,GAAG,CAACC,IAAI,GAAG1B,IAAI,CAAC2B,GAAG,CAACF,GAAG,CAACC,IAAI,EAAET,IAAI,CAACzE,QAAQ,CAACC,CAAC,CAAC;QAC9CgF,GAAG,CAACG,GAAG,GAAG5B,IAAI,CAAC2B,GAAG,CAACF,GAAG,CAACG,GAAG,EAAEX,IAAI,CAACzE,QAAQ,CAACE,CAAC,CAAC;QAC5C+E,GAAG,CAACI,KAAK,GAAG7B,IAAI,CAAC8B,GAAG,CAACL,GAAG,CAACI,KAAK,EAAEZ,IAAI,CAACzE,QAAQ,CAACC,CAAC,IAAIwE,IAAI,CAACc,KAAK,IAAI,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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}