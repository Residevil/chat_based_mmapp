{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\alexa\\\\chat_based_mmapp\\\\frontend\\\\src\\\\components\\\\MindMap.js\",\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$();\nimport React, { useState, useCallback, useRef } from 'react';\nimport ReactFlow, { Controls, Background, useNodesState, useEdgesState, addEdge, MarkerType } from 'reactflow';\nimport 'reactflow/dist/style.css';\nimport { toPng } from 'html-to-image';\n\n// Custom node component\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst CustomNode = ({\n  id,\n  data,\n  isConnectable\n}) => {\n  _s();\n  const [isEditing, setIsEditing] = useState(false);\n  const [label, setLabel] = useState(data.label);\n  const handleDoubleClick = () => {\n    setIsEditing(true);\n  };\n  const handleBlur = () => {\n    setIsEditing(false);\n    data.onNodesChange(label);\n  };\n  const handleAddChild = () => {\n    data.onAddChild(id);\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    style: {\n      padding: '10px',\n      border: '1px solid #ddd',\n      borderRadius: '5px',\n      background: 'white',\n      minWidth: '150px'\n    },\n    onDoubleClick: handleDoubleClick,\n    children: [isEditing ? /*#__PURE__*/_jsxDEV(\"input\", {\n      type: \"text\",\n      value: label,\n      onChange: e => setLabel(e.target.value),\n      onBlur: handleBlur,\n      autoFocus: true\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 43,\n      columnNumber: 9\n    }, this) : /*#__PURE__*/_jsxDEV(\"div\", {\n      children: label\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 51,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: handleAddChild,\n      children: \"Add Child\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 53,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 32,\n    columnNumber: 5\n  }, this);\n};\n_s(CustomNode, \"Tg9Xh/Z+ACc9XnAD07WHfiY+uiA=\");\n_c = CustomNode;\nconst nodeTypes = {\n  custom: CustomNode\n};\nfunction MindMap({\n  data,\n  onUpdate\n}) {\n  _s2();\n  const [nodes, setNodes, onNodesChange] = useNodesState([]);\n  const [edges, setEdges, onEdgesChange] = useEdgesState([]);\n  // const [translate, setTranslate] = useState({ x: 300, y: 50 });\n  // const [editingNode, setEditingNode] = useState(null);\n  const reactFlowWrapper = useRef(null);\n  const reactFlowInstance = useRef(null);\n  // const [connectionMode, setConnectionMode] = useState(null);\n\n  // Convert mind map data to React Flow format\n  React.useEffect(() => {\n    if (data) {\n      const {\n        nodes: newNodes,\n        edges: newEdges\n      } = convertToReactFlowFormat(data);\n      setNodes(newNodes);\n      setEdges(newEdges);\n    }\n  }, [data, setNodes, setEdges]);\n  const onConnect = useCallback(params => {\n    const newEdge = {\n      ...params,\n      type: 'smoothstep',\n      markerEnd: {\n        type: MarkerType.ArrowClosed\n      }\n    };\n    setEdges(eds => addEdge(newEdge, eds));\n    onUpdate({\n      updatedEdges: [...edges, newEdge]\n    });\n  }, [setEdges, edges, onUpdate]);\n  const onNodeChange = useCallback((nodeId, newLabel) => {\n    setNodes(nds => nds.map(node => node.id === nodeId ? {\n      ...node,\n      data: {\n        ...node.data,\n        label: newLabel\n      }\n    } : node));\n    onUpdate({\n      updatedNode: {\n        id: nodeId,\n        data: {\n          label: newLabel\n        }\n      }\n    });\n  }, [setNodes, onUpdate]);\n  const onAddChild = useCallback(parentId => {\n    const parentNode = nodes.find(node => node.id === parentId);\n    if (!parentNode) return;\n    const newNodeId = `node-${Date.now()}`;\n    const newNode = {\n      id: newNodeId,\n      type: 'custom',\n      position: {\n        x: parentNode.position.x + 200,\n        y: parentNode.position.y + 100\n      },\n      data: {\n        label: 'New Node',\n        onNodeChange: onNodeChange,\n        onAddChild: onAddChild\n      }\n    };\n    const newEdge = {\n      id: `edge-${parentId}-${newNodeId}`,\n      source: parentId,\n      target: newNodeId,\n      type: 'smoothstep',\n      markerEnd: {\n        type: MarkerType.ArrowClosed\n      }\n    };\n    setNodes(nds => [...nds, newNode]);\n    setEdges(eds => [...eds, newEdge]);\n    onUpdate({\n      updatedMap: {\n        nodes: [...nodes, newNode],\n        edges: [...edges, newEdge]\n      }\n    });\n  }, [setNodes, setEdges, onNodeChange, onUpdate, nodes, edges]);\n  React.useEffect(() => {\n    if (data) {\n      const rootNode = {\n        id: 'root',\n        type: 'custom',\n        position: {\n          x: 0,\n          y: 0\n        },\n        data: {\n          label: data.name,\n          onNodeChange: label => onNodeChange('root', label)\n        }\n      };\n      setNodes([rootNode]);\n    }\n  }, [data, setNodes, onNodeChange]);\n  const onDragOver = useCallback(event => {\n    event.preventDefault();\n    event.dataTransfer.dropEffect = 'move';\n  }, []);\n  const onDrop = useCallback(event => {\n    event.preventDefault();\n    const reactFlowBounds = reactFlowWrapper.current.getBoundingClientRect();\n    const type = event.dataTransfer.getData('application/reactflow');\n    if (typeof type === 'undefined' || !type) {\n      return;\n    }\n    const position = reactFlowInstance.current.project({\n      x: event.clientX - reactFlowBounds.left,\n      y: event.clientY - reactFlowBounds.top\n    });\n    const newNode = {\n      id: `node-${Date.now()}`,\n      type,\n      position,\n      data: {\n        label: `${type} node`,\n        onNodeChange: label => onNodeChange(`node-${Date.now()}`, label)\n      }\n    };\n    setNodes(nds => nds.concat(newNode));\n  }, [setNodes, onNodeChange]);\n  // const handleNodeClick = (event, node) => {\n  //   // Handle node click for editing\n  //   setEditingNode(node);\n  // };\n\n  // const handleEditSubmit = (e) => {\n  //   e.preventDefault();\n  //   const updatedNode = {\n  //     ...editingNode,\n  //     data: {\n  //       ...editingNode.data,\n  //       label: e.target.elements.nodeName.value,\n  //       note: e.target.elements.nodeNote.value,\n  //     },\n  //   };\n  //   setNodes((nds) => nds.map((node) => (node.id === updatedNode.id ? updatedNode : node)));\n  //   onUpdate({ updatedNode });\n  //   setEditingNode(null);\n  // };\n\n  // const handleAddChild = () => {\n  //   const newChildId = `${editingNode.id}-child-${Date.now()}`;\n  //   const newChild = {\n  //     id: newChildId,\n  //     type: 'custom',\n  //     position: { x: editingNode.position.x + 200, y: editingNode.position.y },\n  //     data: { label: 'New Child', note: '' },\n  //   };\n  //   const newEdge = { id: `${editingNode.id}-${newChildId}`, source: editingNode.id, target: newChildId, type: 'smoothstep' };\n\n  //   setNodes((nds) => [...nds, newChild]);\n  //   setEdges((eds) => [...eds, newEdge]);\n  //   onUpdate({ updatedNode: newChild });\n  // };\n\n  // Saving Mind Map as PNG file\n  const handleSave = useCallback(() => {\n    if (reactFlowInstance.current && reactFlowWrapper.current) {\n      const flow = reactFlowInstance.current;\n      const {\n        nodes,\n        edges\n      } = flow.toObject();\n\n      // Calculate the bounding box of all nodes\n      const bbox = nodes.reduce((acc, node) => {\n        acc.left = Math.min(acc.left, node.position.x);\n        acc.top = Math.min(acc.top, node.position.y);\n        acc.right = Math.max(acc.right, node.position.x + (node.width || 150));\n        acc.bottom = Math.max(acc.bottom, node.position.y + (node.height || 50));\n        return acc;\n      }, {\n        left: Infinity,\n        top: Infinity,\n        right: -Infinity,\n        bottom: -Infinity\n      });\n\n      // Add padding\n      const padding = 50;\n      bbox.left -= padding;\n      bbox.top -= padding;\n      bbox.right += padding;\n      bbox.bottom += padding;\n      const width = bbox.right - bbox.left;\n      const height = bbox.bottom - bbox.top;\n\n      // Calculate the zoom level to fit the entire mind map\n      const xZoom = reactFlowWrapper.current.offsetWidth / width;\n      const yZoom = reactFlowWrapper.current.offsetHeight / height;\n      const zoomLevel = Math.min(xZoom, yZoom, 1); // Limit zoom to 0.75 to prevent excessive enlargement\n\n      // Set the viewport to include all nodes\n      flow.setViewport({\n        x: -bbox.left * zoomLevel,\n        y: -bbox.top * zoomLevel,\n        zoom: zoomLevel\n      }, {\n        duration: 0\n      });\n\n      // Wait for the viewport change to take effect\n      setTimeout(() => {\n        toPng(reactFlowWrapper.current, {\n          backgroundColor: '#ffffff',\n          width: reactFlowWrapper.current.offsetWidth,\n          height: reactFlowWrapper.current.offsetHeight\n        }).then(dataUrl => {\n          const link = document.createElement('a');\n          link.download = 'mind-map.png';\n          link.href = dataUrl;\n          link.click();\n        }).catch(error => {\n          console.error('Error saving mind map:', error);\n        });\n      }, 100);\n    }\n  }, []);\n  const toggleConnectionMode = () => {\n    setConnectionMode(prev => prev ? null : 'connect');\n  };\n\n  //     toPng(reactFlowWrapper.current, { \n  //       cacheBust: true, \n  //       backgroundColor: '#ffffff',\n  //       width: width,\n  //       height: height,\n  //       style: {\n  //         width: `${width}px`,\n  //         height: `${height}px`,\n  //       },\n  //     })\n  //       .then((dataUrl) => {\n  //         const link = document.createElement('a');\n  //         link.download = 'mind-map.png';\n  //         link.href = dataUrl;\n  //         link.click();\n  //       })\n  //       .catch((error) => {\n  //         console.error('Error saving mind map:', error);\n  //       });\n  //   }\n  // }, []);\n\n  console.log('MindMap component received data:', data);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    ref: reactFlowWrapper,\n    style: {\n      width: '100%',\n      height: '500px',\n      border: '1px solid black'\n    },\n    children: [/*#__PURE__*/_jsxDEV(ReactFlow, {\n      nodes: nodes,\n      edges: edges,\n      onNodesChange: onNodesChange,\n      onEdgesChange: onEdgesChange,\n      onConnect: onConnect\n      // onNodeClick={handleNodeClick}\n      ,\n      nodeTypes: nodeTypes,\n      onInit: instance => reactFlowInstance.current = instance,\n      onDrop: onDrop,\n      onDragOver: onDragOver,\n      fitView: true,\n      connectionMode: connectionMode,\n      children: [/*#__PURE__*/_jsxDEV(Controls, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 316,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Background, {\n        variant: \"dots\",\n        gap: 12,\n        size: 1\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 317,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 302,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: handleSave,\n      style: {\n        position: 'absolute',\n        bottom: 10,\n        right: 10\n      },\n      children: \"Save as PNG\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 352,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 301,\n    columnNumber: 5\n  }, this);\n}\n\n// Helper function to convert mind map data to React Flow format\n_s2(MindMap, \"0IYq8uYBFDZnzeE4GJXNrlL/x5w=\", false, function () {\n  return [useNodesState, useEdgesState];\n});\n_c2 = MindMap;\nfunction convertToReactFlowFormat(data, parentId = null, x = 0, y = 0) {\n  const nodes = [];\n  const edges = [];\n  const nodeWidth = 150;\n  const nodeHeight = 50;\n  const horizontalSpacing = 200;\n  const verticalSpacing = 100;\n  function processNode(node, parentId, x, y) {\n    var _node$attributes;\n    // const id = `${level}-${index}-${node.name.replace(/\\s+/g, '-').toLowerCase()}`;\n    // const x = level * horizontalSpacing;\n    // const y = index * verticalSpacing;    \n    const id = `${node.name.replace(/\\s+/g, '-').toLowerCase()}-${Date.now()}`;\n    nodes.push({\n      id,\n      type: 'custom',\n      position: {\n        x,\n        y\n      },\n      data: {\n        label: node.name,\n        note: (_node$attributes = node.attributes) === null || _node$attributes === void 0 ? void 0 : _node$attributes.note,\n        onNodeChange: () => {},\n        // This will be set in the MindMap Component\n        onAddChild: () => {} // This will be set in the MindMap Component\n      },\n      style: {\n        width: nodeWidth,\n        height: nodeHeight\n      }\n    });\n    if (parentId) {\n      edges.push({\n        id: `${parentId}-${id}`,\n        source: parentId,\n        target: id,\n        type: 'smoothstep',\n        markerEnd: {\n          type: MarkerType.ArrowClosed\n        }\n      });\n    }\n    if (node.children) {\n      node.children.forEach((child, index) => {\n        const childX = x + horizontalSpacing;\n        const childY = y + (index - (node.children.length - 1) / 2) * verticalSpacing;\n        const {\n          childNodes,\n          childEdges\n        } = processNode(child, id, childX, childY);\n        nodes.push(...childNodes);\n        edges.push(...childEdges);\n      });\n    }\n    return {\n      childNodes: nodes,\n      childEdges: edges\n    };\n  }\n  const {\n    childNodes,\n    childEdges\n  } = processNode(data, parentId, x, y);\n  return {\n    nodes: childNodes,\n    edges: childEdges\n  };\n}\nexport default MindMap;\nvar _c, _c2;\n$RefreshReg$(_c, \"CustomNode\");\n$RefreshReg$(_c2, \"MindMap\");","map":{"version":3,"names":["React","useState","useCallback","useRef","ReactFlow","Controls","Background","useNodesState","useEdgesState","addEdge","MarkerType","toPng","jsxDEV","_jsxDEV","CustomNode","id","data","isConnectable","_s","isEditing","setIsEditing","label","setLabel","handleDoubleClick","handleBlur","onNodesChange","handleAddChild","onAddChild","style","padding","border","borderRadius","background","minWidth","onDoubleClick","children","type","value","onChange","e","target","onBlur","autoFocus","fileName","_jsxFileName","lineNumber","columnNumber","onClick","_c","nodeTypes","custom","MindMap","onUpdate","_s2","nodes","setNodes","edges","setEdges","onEdgesChange","reactFlowWrapper","reactFlowInstance","useEffect","newNodes","newEdges","convertToReactFlowFormat","onConnect","params","newEdge","markerEnd","ArrowClosed","eds","updatedEdges","onNodeChange","nodeId","newLabel","nds","map","node","updatedNode","parentId","parentNode","find","newNodeId","Date","now","newNode","position","x","y","source","updatedMap","rootNode","name","onDragOver","event","preventDefault","dataTransfer","dropEffect","onDrop","reactFlowBounds","current","getBoundingClientRect","getData","project","clientX","left","clientY","top","concat","handleSave","flow","toObject","bbox","reduce","acc","Math","min","right","max","width","bottom","height","Infinity","xZoom","offsetWidth","yZoom","offsetHeight","zoomLevel","setViewport","zoom","duration","setTimeout","backgroundColor","then","dataUrl","link","document","createElement","download","href","click","catch","error","console","toggleConnectionMode","setConnectionMode","prev","log","ref","onInit","instance","fitView","connectionMode","variant","gap","size","_c2","nodeWidth","nodeHeight","horizontalSpacing","verticalSpacing","processNode","_node$attributes","replace","toLowerCase","push","note","attributes","forEach","child","index","childX","childY","length","childNodes","childEdges","$RefreshReg$"],"sources":["C:/Users/alexa/chat_based_mmapp/frontend/src/components/MindMap.js"],"sourcesContent":["import React, { useState, useCallback, useRef } from 'react';\r\nimport ReactFlow, {\r\n  Controls,\r\n  Background,\r\n  useNodesState,\r\n  useEdgesState,\r\n  addEdge,\r\n  MarkerType,\r\n} from 'reactflow';\r\nimport 'reactflow/dist/style.css';\r\nimport { toPng } from 'html-to-image';\r\n\r\n// Custom node component\r\nconst CustomNode = ({ id, data, isConnectable }) => {\r\n  const [isEditing, setIsEditing] = useState(false);\r\n  const [label, setLabel] = useState(data.label);\r\n\r\n  const handleDoubleClick = () => {\r\n    setIsEditing(true);\r\n  }\r\n\r\n  const handleBlur =() => {\r\n    setIsEditing(false);\r\n    data.onNodesChange(label);\r\n  }\r\n\r\n  const handleAddChild = () => {\r\n    data.onAddChild(id)\r\n  }\r\n  \r\n  return (\r\n    <div\r\n      style={{\r\n        padding: '10px',\r\n        border: '1px solid #ddd',\r\n        borderRadius: '5px',\r\n        background: 'white',\r\n        minWidth: '150px',\r\n      }}\r\n      onDoubleClick={handleDoubleClick}\r\n    >\r\n      {isEditing ? (\r\n        <input\r\n          type=\"text\"\r\n          value={label}\r\n          onChange={(e) => setLabel(e.target.value)}\r\n          onBlur={handleBlur}\r\n          autoFocus\r\n        />\r\n      ) : (\r\n        <div>{label}</div>\r\n      )}\r\n      <button onClick={handleAddChild}>Add Child</button>\r\n    </div>\r\n  );\r\n};\r\n\r\nconst nodeTypes = {\r\n  custom: CustomNode,\r\n};\r\n\r\nfunction MindMap({ data, onUpdate }) {\r\n  const [nodes, setNodes, onNodesChange] = useNodesState([]);\r\n  const [edges, setEdges, onEdgesChange] = useEdgesState([]);\r\n  // const [translate, setTranslate] = useState({ x: 300, y: 50 });\r\n  // const [editingNode, setEditingNode] = useState(null);\r\n  const reactFlowWrapper = useRef(null);\r\n  const reactFlowInstance = useRef(null);\r\n  // const [connectionMode, setConnectionMode] = useState(null);\r\n\r\n  // Convert mind map data to React Flow format\r\n  React.useEffect(() => {\r\n    if (data) {\r\n      const { nodes: newNodes, edges: newEdges } = convertToReactFlowFormat(data);\r\n      setNodes(newNodes);\r\n      setEdges(newEdges);\r\n    }\r\n  }, [data, setNodes, setEdges]);\r\n\r\n  const onConnect = useCallback((params) => {\r\n    const newEdge = { ...params, type: 'smoothstep', markerEnd: { type: MarkerType.ArrowClosed } };\r\n    setEdges((eds) => addEdge(newEdge, eds));\r\n    onUpdate({ updatedEdges: [...edges, newEdge] });\r\n  }, [setEdges, edges, onUpdate])\r\n\r\n  const onNodeChange = useCallback(\r\n    (nodeId, newLabel) => {\r\n      setNodes((nds) =>\r\n        nds.map((node) =>\r\n          node.id === nodeId ? { ...node, data: { ...node.data, label: newLabel } } : node\r\n        )\r\n      );\r\n      onUpdate({ updatedNode: { id: nodeId, data: { label: newLabel }}});\r\n    },\r\n    [setNodes, onUpdate]\r\n  );\r\n\r\n  const onAddChild = useCallback(\r\n    (parentId) => {\r\n      const parentNode = nodes.find(node => node.id === parentId);\r\n      if (!parentNode) return;\r\n\r\n      const newNodeId = `node-${Date.now()}`;\r\n      const newNode = {\r\n        id: newNodeId,\r\n        type: 'custom',\r\n        position: {\r\n          x: parentNode.position.x + 200,\r\n          y: parentNode.position.y + 100,\r\n        },\r\n        data: { \r\n          label: 'New Node', \r\n          onNodeChange: onNodeChange, \r\n          onAddChild: onAddChild, \r\n        },\r\n      };\r\n      const newEdge = {\r\n        id: `edge-${parentId}-${newNodeId}`,\r\n        source: parentId,\r\n        target: newNodeId,\r\n        type: 'smoothstep',\r\n        markerEnd: { type: MarkerType.ArrowClosed },\r\n      };\r\n\r\n      setNodes((nds) => [...nds, newNode]);\r\n      setEdges((eds) => [...eds, newEdge]);\r\n      onUpdate({ updatedMap: { nodes: [...nodes, newNode], edges: [...edges, newEdge] } });\r\n    },\r\n    [setNodes, setEdges, onNodeChange, onUpdate, nodes, edges]\r\n  );\r\n\r\n  React.useEffect(() => {\r\n    if (data) {\r\n      const rootNode = {\r\n        id: 'root',\r\n        type: 'custom',\r\n        position: { x: 0, y: 0 },\r\n        data: { label: data.name, onNodeChange: (label) => onNodeChange('root', label) },\r\n      };\r\n      setNodes([rootNode]);\r\n    }\r\n  }, [data, setNodes, onNodeChange]);\r\n\r\n  const onDragOver = useCallback((event) => {\r\n    event.preventDefault();\r\n    event.dataTransfer.dropEffect = 'move';\r\n  }, []);\r\n\r\n  const onDrop = useCallback(\r\n    (event) => {\r\n      event.preventDefault();\r\n\r\n      const reactFlowBounds = reactFlowWrapper.current.getBoundingClientRect();\r\n      const type = event.dataTransfer.getData('application/reactflow');\r\n\r\n      if (typeof type === 'undefined' || !type) {\r\n        return;\r\n      }\r\n\r\n      const position = reactFlowInstance.current.project({\r\n        x: event.clientX - reactFlowBounds.left,\r\n        y: event.clientY - reactFlowBounds.top,\r\n      });\r\n      const newNode = {\r\n        id: `node-${Date.now()}`,\r\n        type,\r\n        position,\r\n        data: { label: `${type} node`, onNodeChange: (label) => onNodeChange(`node-${Date.now()}`, label) },\r\n      };\r\n\r\n      setNodes((nds) => nds.concat(newNode));\r\n    },\r\n    [setNodes, onNodeChange]\r\n  );\r\n  // const handleNodeClick = (event, node) => {\r\n  //   // Handle node click for editing\r\n  //   setEditingNode(node);\r\n  // };\r\n\r\n  // const handleEditSubmit = (e) => {\r\n  //   e.preventDefault();\r\n  //   const updatedNode = {\r\n  //     ...editingNode,\r\n  //     data: {\r\n  //       ...editingNode.data,\r\n  //       label: e.target.elements.nodeName.value,\r\n  //       note: e.target.elements.nodeNote.value,\r\n  //     },\r\n  //   };\r\n  //   setNodes((nds) => nds.map((node) => (node.id === updatedNode.id ? updatedNode : node)));\r\n  //   onUpdate({ updatedNode });\r\n  //   setEditingNode(null);\r\n  // };\r\n\r\n  // const handleAddChild = () => {\r\n  //   const newChildId = `${editingNode.id}-child-${Date.now()}`;\r\n  //   const newChild = {\r\n  //     id: newChildId,\r\n  //     type: 'custom',\r\n  //     position: { x: editingNode.position.x + 200, y: editingNode.position.y },\r\n  //     data: { label: 'New Child', note: '' },\r\n  //   };\r\n  //   const newEdge = { id: `${editingNode.id}-${newChildId}`, source: editingNode.id, target: newChildId, type: 'smoothstep' };\r\n    \r\n  //   setNodes((nds) => [...nds, newChild]);\r\n  //   setEdges((eds) => [...eds, newEdge]);\r\n  //   onUpdate({ updatedNode: newChild });\r\n  // };\r\n\r\n  // Saving Mind Map as PNG file\r\n  const handleSave = useCallback(() => {\r\n    if (reactFlowInstance.current && reactFlowWrapper.current) {\r\n      const flow = reactFlowInstance.current;\r\n      const { nodes, edges } = flow.toObject();\r\n\r\n    // Calculate the bounding box of all nodes\r\n    const bbox = nodes.reduce(\r\n      (acc, node) => {\r\n        acc.left = Math.min(acc.left, node.position.x);\r\n        acc.top = Math.min(acc.top, node.position.y);\r\n        acc.right = Math.max(acc.right, node.position.x + (node.width || 150));\r\n        acc.bottom = Math.max(acc.bottom, node.position.y + (node.height || 50));\r\n        return acc;\r\n      },\r\n      { left: Infinity, top: Infinity, right: -Infinity, bottom: -Infinity }\r\n    );\r\n\r\n    // Add padding\r\n    const padding = 50;\r\n    bbox.left -= padding;\r\n    bbox.top -= padding;\r\n    bbox.right += padding;\r\n    bbox.bottom += padding;\r\n\r\n    const width = bbox.right - bbox.left;\r\n    const height = bbox.bottom - bbox.top;\r\n\r\n    // Calculate the zoom level to fit the entire mind map\r\n    const xZoom = reactFlowWrapper.current.offsetWidth / width;\r\n    const yZoom = reactFlowWrapper.current.offsetHeight / height;\r\n    const zoomLevel = Math.min(xZoom, yZoom, 1); // Limit zoom to 0.75 to prevent excessive enlargement\r\n\r\n    // Set the viewport to include all nodes\r\n    flow.setViewport(\r\n      {\r\n        x: -bbox.left * zoomLevel,\r\n        y: -bbox.top * zoomLevel,\r\n        zoom: zoomLevel,\r\n      },\r\n      { duration: 0 }\r\n    );\r\n\r\n    // Wait for the viewport change to take effect\r\n    setTimeout(() => {\r\n      toPng(reactFlowWrapper.current, {\r\n        backgroundColor: '#ffffff',\r\n        width: reactFlowWrapper.current.offsetWidth,\r\n        height: reactFlowWrapper.current.offsetHeight,\r\n      })\r\n        .then((dataUrl) => {\r\n          const link = document.createElement('a');\r\n          link.download = 'mind-map.png';\r\n          link.href = dataUrl;\r\n          link.click();\r\n        })\r\n        .catch((error) => {\r\n          console.error('Error saving mind map:', error);\r\n        });\r\n    }, 100);\r\n  }\r\n}, []);\r\n\r\nconst toggleConnectionMode = () => {\r\n  setConnectionMode(prev => prev ? null : 'connect');\r\n};\r\n    \r\n  //     toPng(reactFlowWrapper.current, { \r\n  //       cacheBust: true, \r\n  //       backgroundColor: '#ffffff',\r\n  //       width: width,\r\n  //       height: height,\r\n  //       style: {\r\n  //         width: `${width}px`,\r\n  //         height: `${height}px`,\r\n  //       },\r\n  //     })\r\n  //       .then((dataUrl) => {\r\n  //         const link = document.createElement('a');\r\n  //         link.download = 'mind-map.png';\r\n  //         link.href = dataUrl;\r\n  //         link.click();\r\n  //       })\r\n  //       .catch((error) => {\r\n  //         console.error('Error saving mind map:', error);\r\n  //       });\r\n  //   }\r\n  // }, []);\r\n\r\n  console.log('MindMap component received data:', data)\r\n  return (\r\n    <div ref={reactFlowWrapper} style={{ width: '100%', height: '500px', border: '1px solid black' }}>\r\n      <ReactFlow\r\n        nodes={nodes}\r\n        edges={edges}\r\n        onNodesChange={onNodesChange}\r\n        onEdgesChange={onEdgesChange}\r\n        onConnect={onConnect}\r\n        // onNodeClick={handleNodeClick}\r\n        nodeTypes={nodeTypes}\r\n        onInit={(instance) => (reactFlowInstance.current = instance)}\r\n        onDrop={onDrop}\r\n        onDragOver={onDragOver}\r\n        fitView\r\n        connectionMode={connectionMode}\r\n      >\r\n        <Controls />\r\n        <Background variant=\"dots\" gap={12} size={1} />\r\n      </ReactFlow>\r\n      {/* {editingNode && (\r\n        <div style={{ position: 'absolute', top:10, right:10, background: 'white', padding:10, zIndex: 1000}}>\r\n          <form onSubmit={handleEditSubmit}>\r\n            <input name=\"nodeName\" defaultValue={editingNode.data.label} />\r\n            <textarea name=\"nodeNote\" defaultValue={editingNode.data.note || ''} />\r\n            <button type=\"submit\">Update</button>\r\n          </form> \r\n        </div>\r\n      )} */}\r\n      {/* {editingNode && (\r\n        <div style={{ position: 'absolute', top: 10, right: 10, background: 'white', padding: 10, zIndex: 1000, borderRadius: '5px', boxShadow: '0 0 10px rgba(0,0,0,0.1)' }}>\r\n          <form onSubmit={handleEditSubmit}>\r\n            <div style={{ marginBottom: '10px' }}>\r\n              <label htmlFor=\"nodeName\">Node Name:</label>\r\n              <input id=\"nodeName\" name=\"nodeName\" defaultValue={editingNode.data.label} style={{ width: '100%' }} />\r\n            </div>\r\n            <div style={{ marginBottom: '10px' }}>\r\n              <label htmlFor=\"nodeNote\">Note:</label>\r\n              <textarea id=\"nodeNote\" name=\"nodeNote\" defaultValue={editingNode.data.note || ''} style={{ width: '100%', height: '60px' }} />\r\n            </div>\r\n            <div style={{ display: 'flex', justifyContent: 'space-between' }}>\r\n              <button type=\"submit\">Update</button>\r\n              <button type=\"button\" onClick={handleAddChild}>Add Child</button>\r\n              <button type=\"button\" onClick={() => setEditingNode(null)}>Cancel</button>\r\n            </div>\r\n          </form>\r\n        </div>\r\n      )} */}\r\n      {/* <div style={{ position: 'absolute', bottom: 10, left: 10 }}>\r\n        <button onClick={toggleConnectionMode}>\r\n          {connectionMode ? 'Exit Connection Mode' : 'Enter Connection Mode'}\r\n        </button>\r\n      </div> */}\r\n      <button onClick={handleSave} style={{ position: 'absolute', bottom: 10, right: 10 }} >Save as PNG</button>\r\n    </div>\r\n  );\r\n}\r\n\r\n// Helper function to convert mind map data to React Flow format\r\nfunction convertToReactFlowFormat(data, parentId = null, x = 0, y = 0) {\r\n  const nodes = [];\r\n  const edges = [];\r\n\r\n  const nodeWidth = 150;\r\n  const nodeHeight = 50;\r\n  const horizontalSpacing = 200;\r\n  const verticalSpacing = 100;\r\n\r\n  function processNode(node, parentId, x , y) {\r\n    // const id = `${level}-${index}-${node.name.replace(/\\s+/g, '-').toLowerCase()}`;\r\n    // const x = level * horizontalSpacing;\r\n    // const y = index * verticalSpacing;    \r\n    const id = `${node.name.replace(/\\s+/g, '-').toLowerCase()}-${Date.now()}`;\r\n\r\n    nodes.push({\r\n      id,\r\n      type: 'custom',\r\n      position: { x, y },\r\n      data: { \r\n        label: node.name, \r\n        note: node.attributes?.note, \r\n        onNodeChange: () => {}, // This will be set in the MindMap Component\r\n        onAddChild: () => {}, // This will be set in the MindMap Component\r\n      },\r\n      style: { width: nodeWidth, height: nodeHeight },\r\n    });\r\n\r\n    if (parentId) {\r\n      edges.push({\r\n        id: `${parentId}-${id}`, \r\n        source: parentId, \r\n        target: id, \r\n        type: 'smoothstep', \r\n        markerEnd: { type: MarkerType.ArrowClosed } });\r\n    }\r\n\r\n    if (node.children) {\r\n      node.children.forEach((child, index) => {\r\n        const childX = x + horizontalSpacing;\r\n        const childY = y + (index - (node.children.length - 1) / 2) * verticalSpacing;\r\n        const { childNodes, childEdges } = processNode(child, id, childX, childY);\r\n        nodes.push(...childNodes);\r\n        edges.push(...childEdges);\r\n      });\r\n    }\r\n\r\n    return { childNodes: nodes, childEdges: edges };\r\n  }\r\n\r\n  const { childNodes, childEdges } = processNode(data, parentId, x, y);\r\n  return { nodes: childNodes, edges: childEdges };\r\n}\r\n\r\nexport default MindMap;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}