{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\alexa\\\\chat_based_mmapp\\\\frontend\\\\src\\\\components\\\\MindMap.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useCallback, useRef } from 'react';\nimport ReactFlow, { Controls, Background, useNodesState, useEdgesState, addEdge } from 'reactflow';\nimport 'reactflow/dist/style.css';\nimport { toPng } from 'html-to-image';\n\n// Custom node component\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst CustomNode = ({\n  data\n}) => {\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    style: {\n      padding: '10px',\n      border: '1px solid #ddd',\n      borderRadius: '5px',\n      background: 'white'\n    },\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      children: data.label\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 17,\n      columnNumber: 7\n    }, this), data.note && /*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        fontSize: '10px',\n        color: '#888'\n      },\n      children: data.note\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 18,\n      columnNumber: 21\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 16,\n    columnNumber: 5\n  }, this);\n};\n_c = CustomNode;\nconst nodeTypes = {\n  custom: CustomNode\n};\nfunction MindMap({\n  data,\n  onUpdate\n}) {\n  _s();\n  const [nodes, setNodes, onNodesChange] = useNodesState([]);\n  const [edges, setEdges, onEdgesChange] = useEdgesState([]);\n  // const [translate, setTranslate] = useState({ x: 300, y: 50 });\n  const [editingNode, setEditingNode] = useState(null);\n  const reactFlowWrapper = useRef(null);\n\n  // Convert mind map data to React Flow format\n  React.useEffect(() => {\n    if (data) {\n      const {\n        nodes: newNodes,\n        edges: newEdges\n      } = convertToReactFlowFormat(data);\n      setNodes(newNodes);\n      setEdges(newEdges);\n    }\n  }, [data, setNodes, setEdges]);\n  const onConnect = useCallback(params => setEdges(eds => addEdge(params, eds)), [setEdges]);\n  const handleNodeClick = (event, node) => {\n    // Handle node click for editing\n    setEditingNode(node);\n  };\n  const handleEditSubmit = e => {\n    e.preventDefault();\n    const updatedNode = {\n      ...editingNode,\n      data: {\n        ...editingNode.data,\n        label: e.target.elements.nodeName.value,\n        note: e.target.elements.nodeNote.value\n      }\n    };\n    setNodes(nds => nds.map(node => node.id === updatedNode.id ? updatedNode : node));\n    onUpdate({\n      updatedNode\n    });\n    setEditingNode(null);\n  };\n  const handleSave = () => {\n    if (reactFlowWrapper.current === null) {\n      return;\n    }\n    toPng(reactFlowWrapper.current, {\n      cacheBust: true\n    }).then(dataUrl => {\n      const link = document.createElement('a');\n      link.download = 'mind-map.png';\n      link.href = dataUrl;\n      link.click();\n    }).catch(error => {\n      console.error('Error saving mind map:', error);\n    });\n  };\n  const handleDisplay = () => {\n    if (reactFlowWrapper.current === null) {\n      return;\n    }\n\n    // const node = document.getElementById('mind-map-container');\n    toPng(reactFlowWrapper.current, {\n      cacheBust: true\n    }).then(dataUrl => {\n      const img = new Image();\n      img.src = dataUrl;\n      document.body.appendChild(img);\n    }).catch(error => {\n      console.error('Error displaying mind map:', error);\n    });\n  };\n  console.log('MindMap component received data:', data);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    ref: reactFlowWrapper,\n    style: {\n      width: '100%',\n      height: '500px',\n      border: '1px solid black'\n    },\n    children: [/*#__PURE__*/_jsxDEV(ReactFlow, {\n      nodes: nodes,\n      edges: edges,\n      onNodesChange: onNodesChange,\n      onEdgesChange: onEdgesChange,\n      onConnect: onConnect,\n      onNodeClick: handleNodeClick,\n      nodeTypes: nodeTypes,\n      fitView: true,\n      children: [/*#__PURE__*/_jsxDEV(Controls, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 112,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Background, {\n        variant: \"dots\",\n        gap: 12,\n        size: 1\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 113,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 102,\n      columnNumber: 7\n    }, this), editingNode && /*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        position: 'absolute',\n        top: 10,\n        right: 10,\n        background: 'white',\n        padding: 10\n      },\n      children: /*#__PURE__*/_jsxDEV(\"form\", {\n        onSubmit: handleEditSubmit,\n        children: [/*#__PURE__*/_jsxDEV(\"input\", {\n          name: \"nodeName\",\n          defaultValue: editingNode.data.label\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 118,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"textarea\", {\n          name: \"nodeNote\",\n          defaultValue: editingNode.data.note || ''\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 119,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          type: \"submit\",\n          children: \"Update\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 120,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 117,\n        columnNumber: 11\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 116,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: handleDisplay,\n      style: {\n        position: 'absolute',\n        bottom: 10,\n        right: 120\n      },\n      children: \"Print Display\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 124,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: handleSave,\n      style: {\n        position: 'absolute',\n        bottom: 10,\n        right: 10\n      },\n      children: \"Save as PNG\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 125,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 101,\n    columnNumber: 5\n  }, this);\n}\n\n// Helper function to convert mind map data to React Flow format\n_s(MindMap, \"ftgmn2dapx6/8uI8XfS8AjfLIQI=\", false, function () {\n  return [useNodesState, useEdgesState];\n});\n_c2 = MindMap;\nfunction convertToReactFlowFormat(data, parentId = null, x = 0, y = 0) {\n  const nodes = [];\n  const edges = [];\n  const node = {\n    id: data.name,\n    type: 'custom',\n    data: {\n      label: data.name,\n      note: data.attributes && data.attributes.note\n    },\n    position: {\n      x,\n      y\n    }\n  };\n  nodes.push(node);\n  if (parentId) {\n    edges.push({\n      id: `${parentId}-${data.name}`,\n      source: parentId,\n      target: data.name\n    });\n  }\n  if (data.children) {\n    data.children.forEach((child, index) => {\n      const childX = x + 200;\n      const childY = y + (index - (data.children.length - 1) / 2) * 100;\n      const {\n        nodes: childNodes,\n        edges: childEdges\n      } = convertToReactFlowFormat(child, data.name, childX, childY);\n      nodes.push(...childNodes);\n      edges.push(...childEdges);\n    });\n  }\n  return {\n    nodes,\n    edges\n  };\n}\nexport default MindMap;\nvar _c, _c2;\n$RefreshReg$(_c, \"CustomNode\");\n$RefreshReg$(_c2, \"MindMap\");","map":{"version":3,"names":["React","useState","useCallback","useRef","ReactFlow","Controls","Background","useNodesState","useEdgesState","addEdge","toPng","jsxDEV","_jsxDEV","CustomNode","data","style","padding","border","borderRadius","background","children","label","fileName","_jsxFileName","lineNumber","columnNumber","note","fontSize","color","_c","nodeTypes","custom","MindMap","onUpdate","_s","nodes","setNodes","onNodesChange","edges","setEdges","onEdgesChange","editingNode","setEditingNode","reactFlowWrapper","useEffect","newNodes","newEdges","convertToReactFlowFormat","onConnect","params","eds","handleNodeClick","event","node","handleEditSubmit","e","preventDefault","updatedNode","target","elements","nodeName","value","nodeNote","nds","map","id","handleSave","current","cacheBust","then","dataUrl","link","document","createElement","download","href","click","catch","error","console","handleDisplay","img","Image","src","body","appendChild","log","ref","width","height","onNodeClick","fitView","variant","gap","size","position","top","right","onSubmit","name","defaultValue","type","onClick","bottom","_c2","parentId","x","y","attributes","push","source","forEach","child","index","childX","childY","length","childNodes","childEdges","$RefreshReg$"],"sources":["C:/Users/alexa/chat_based_mmapp/frontend/src/components/MindMap.js"],"sourcesContent":["import React, { useState, useCallback, useRef } from 'react';\r\nimport ReactFlow, {\r\n  Controls,\r\n  Background,\r\n  useNodesState,\r\n  useEdgesState,\r\n  addEdge,\r\n} from 'reactflow';\r\nimport 'reactflow/dist/style.css';\r\n\r\nimport { toPng } from 'html-to-image';\r\n\r\n// Custom node component\r\nconst CustomNode = ({ data }) => {\r\n  return (\r\n    <div style={{ padding: '10px', border: '1px solid #ddd', borderRadius: '5px', background: 'white' }}>\r\n      <div>{data.label}</div>\r\n      {data.note && <div style={{ fontSize: '10px', color: '#888' }}>{data.note}</div>}\r\n    </div>\r\n  );\r\n};\r\n\r\nconst nodeTypes = {\r\n  custom: CustomNode,\r\n};\r\n\r\nfunction MindMap({ data, onUpdate }) {\r\n  const [nodes, setNodes, onNodesChange] = useNodesState([]);\r\n  const [edges, setEdges, onEdgesChange] = useEdgesState([]);\r\n  // const [translate, setTranslate] = useState({ x: 300, y: 50 });\r\n  const [editingNode, setEditingNode] = useState(null);\r\n  const reactFlowWrapper = useRef(null);\r\n\r\n  // Convert mind map data to React Flow format\r\n  React.useEffect(() => {\r\n    if (data) {\r\n      const { nodes: newNodes, edges: newEdges } = convertToReactFlowFormat(data);\r\n      setNodes(newNodes);\r\n      setEdges(newEdges);\r\n    }\r\n  }, [data, setNodes, setEdges]);\r\n\r\n  const onConnect = useCallback((params) => setEdges((eds) => addEdge(params, eds)), [setEdges]);\r\n  \r\n  const handleNodeClick = (event, node) => {\r\n    // Handle node click for editing\r\n    setEditingNode(node);\r\n  };\r\n\r\n  const handleEditSubmit = (e) => {\r\n    e.preventDefault();\r\n    const updatedNode = {\r\n      ...editingNode,\r\n      data: {\r\n        ...editingNode.data,\r\n        label: e.target.elements.nodeName.value,\r\n        note: e.target.elements.nodeNote.value,\r\n      },\r\n    };\r\n    setNodes((nds) => nds.map((node) => (node.id === updatedNode.id ? updatedNode : node)));\r\n    onUpdate({ updatedNode });\r\n    setEditingNode(null);\r\n  };\r\n\r\n  const handleSave = () => {\r\n    if (reactFlowWrapper.current === null) {\r\n      return;\r\n    }\r\n    \r\n    toPng(reactFlowWrapper.current, { cacheBust: true, })\r\n      .then((dataUrl) => {\r\n        const link = document.createElement('a');\r\n        link.download = 'mind-map.png';\r\n        link.href = dataUrl;\r\n        link.click();\r\n      })\r\n      .catch((error) => {\r\n        console.error('Error saving mind map:', error);\r\n      });\r\n  };\r\n\r\n  const handleDisplay = () => {\r\n    if (reactFlowWrapper.current === null) {\r\n      return;\r\n    }\r\n\r\n    // const node = document.getElementById('mind-map-container');\r\n    toPng(reactFlowWrapper.current, { cacheBust: true, })\r\n      .then((dataUrl) => {\r\n        const img = new Image();\r\n        img.src = dataUrl;\r\n        document.body.appendChild(img);\r\n      })\r\n      .catch((error) => {\r\n        console.error('Error displaying mind map:', error);\r\n      });\r\n  }\r\n\r\n  console.log('MindMap component received data:', data)\r\n  return (\r\n    <div ref={reactFlowWrapper} style={{ width: '100%', height: '500px', border: '1px solid black' }}>\r\n      <ReactFlow\r\n        nodes={nodes}\r\n        edges={edges}\r\n        onNodesChange={onNodesChange}\r\n        onEdgesChange={onEdgesChange}\r\n        onConnect={onConnect}\r\n        onNodeClick={handleNodeClick}\r\n        nodeTypes={nodeTypes}\r\n        fitView\r\n      >\r\n        <Controls />\r\n        <Background variant=\"dots\" gap={12} size={1} />\r\n      </ReactFlow>\r\n      {editingNode && (\r\n        <div style={{ position: 'absolute', top:10, right:10, background: 'white', padding:10}}>\r\n          <form onSubmit={handleEditSubmit}>\r\n            <input name=\"nodeName\" defaultValue={editingNode.data.label} />\r\n            <textarea name=\"nodeNote\" defaultValue={editingNode.data.note || ''} />\r\n            <button type=\"submit\">Update</button>\r\n          </form> \r\n        </div>\r\n      )}\r\n      <button onClick={handleDisplay} style={{ position: 'absolute', bottom: 10, right: 120 }}>Print Display</button>\r\n      <button onClick={handleSave} style={{ position: 'absolute', bottom: 10, right: 10 }} >Save as PNG</button>\r\n    </div>\r\n\r\n  );\r\n}\r\n\r\n// Helper function to convert mind map data to React Flow format\r\nfunction convertToReactFlowFormat(data, parentId = null, x = 0, y = 0) {\r\n  const nodes = [];\r\n  const edges = [];\r\n  const node = {\r\n    id: data.name,\r\n    type: 'custom',\r\n    data: { label: data.name, note: data.attributes && data.attributes.note },\r\n    position: { x, y },\r\n  };\r\n  nodes.push(node);\r\n\r\n  if (parentId) {\r\n    edges.push({ id: `${parentId}-${data.name}`, source: parentId, target: data.name });\r\n  }\r\n\r\n  if (data.children) {\r\n    data.children.forEach((child, index) => {\r\n      const childX = x + 200;\r\n      const childY = y + (index - (data.children.length - 1) / 2) * 100;\r\n      const { nodes: childNodes, edges: childEdges } = convertToReactFlowFormat(child, data.name, childX, childY);\r\n      nodes.push(...childNodes);\r\n      edges.push(...childEdges);\r\n    });\r\n  }\r\n\r\n  return { nodes, edges };\r\n}\r\n\r\nexport default MindMap;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}