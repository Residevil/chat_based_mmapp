{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\alexa\\\\chat_based_mmapp\\\\frontend\\\\src\\\\components\\\\MindMap.js\",\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$();\nimport React, { useState, useCallback, useRef } from 'react';\nimport ReactFlow, { Controls, Background, useNodesState, useEdgesState, addEdge } from 'reactflow';\nimport 'reactflow/dist/style.css';\nimport { toPng } from 'html-to-image';\n\n// Custom node component\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst CustomNode = ({\n  data\n}) => {\n  _s();\n  const [isEditing, setIsEditing] = useState(false);\n  const [label, setLabel] = useState(data.label);\n  const handleDoubleClick = () => {\n    setIsEditing(true);\n  };\n  const handleBlur = () => {\n    setIsEditing(false);\n    data.onNodesChange(label);\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    style: {\n      padding: '10px',\n      border: '1px solid #ddd',\n      borderRadius: '5px',\n      background: 'white',\n      minWidth: '150px'\n    },\n    onDoubleClick: handleDoubleClick,\n    children: isEditing ? /*#__PURE__*/_jsxDEV(\"input\", {\n      type: \"text\",\n      value: label,\n      onChange: e => setLabel(e.target.value),\n      onBlur: handleBlur,\n      autoFocus: true\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 38,\n      columnNumber: 9\n    }, this) : /*#__PURE__*/_jsxDEV(\"div\", {\n      children: label\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 46,\n      columnNumber: 9\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 27,\n    columnNumber: 5\n  }, this);\n};\n_s(CustomNode, \"Tg9Xh/Z+ACc9XnAD07WHfiY+uiA=\");\n_c = CustomNode;\nconst nodeTypes = {\n  custom: CustomNode\n};\nfunction MindMap({\n  data,\n  onUpdate\n}) {\n  _s2();\n  const [nodes, setNodes, onNodesChange] = useNodesState([]);\n  const [edges, setEdges, onEdgesChange] = useEdgesState([]);\n  // const [translate, setTranslate] = useState({ x: 300, y: 50 });\n  const [editingNode, setEditingNode] = useState(null);\n  const reactFlowWrapper = useRef(null);\n  const reactFlowInstance = useRef(null);\n\n  // Convert mind map data to React Flow format\n  React.useEffect(() => {\n    if (data) {\n      const {\n        nodes: newNodes,\n        edges: newEdges\n      } = convertToReactFlowFormat(data);\n      setNodes(newNodes);\n      setEdges(newEdges);\n    }\n  }, [data, setNodes, setEdges]);\n  const onConnect = useCallback(params => setEdges(eds => addEdge(params, eds)), [setEdges]);\n  const handleNodeClick = (event, node) => {\n    // Handle node click for editing\n    setEditingNode(node);\n  };\n  const handleEditSubmit = e => {\n    e.preventDefault();\n    const updatedNode = {\n      ...editingNode,\n      data: {\n        ...editingNode.data,\n        label: e.target.elements.nodeName.value,\n        note: e.target.elements.nodeNote.value\n      }\n    };\n    setNodes(nds => nds.map(node => node.id === updatedNode.id ? updatedNode : node));\n    onUpdate({\n      updatedNode\n    });\n    setEditingNode(null);\n  };\n  const handleAddChild = () => {\n    const newChildId = `${editingNode.id}-child-${Date.now()}`;\n    const newChild = {\n      id: newChildId,\n      type: 'custom',\n      position: {\n        x: editingNode.position.x + 200,\n        y: editingNode.position.y\n      },\n      data: {\n        label: 'New Child',\n        note: ''\n      }\n    };\n    const newEdge = {\n      id: `${editingNode.id}-${newChildId}`,\n      source: editingNode.id,\n      target: newChildId,\n      type: 'smoothstep'\n    };\n    setNodes(nds => [...nds, newChild]);\n    setEdges(eds => [...eds, newEdge]);\n    onUpdate({\n      updatedNode: newChild\n    });\n  };\n  const handleSave = useCallback(() => {\n    if (reactFlowInstance.current && reactFlowWrapper.current) {\n      const flow = reactFlowInstance.current;\n      const {\n        nodes,\n        edges\n      } = flow.toObject();\n\n      // Calculate the bounding box of all nodes\n      const bbox = nodes.reduce((acc, node) => {\n        acc.left = Math.min(acc.left, node.position.x);\n        acc.top = Math.min(acc.top, node.position.y);\n        acc.right = Math.max(acc.right, node.position.x + (node.width || 0));\n        acc.bottom = Math.max(acc.bottom, node.position.y + (node.height || 0));\n        return acc;\n      }, {\n        left: Infinity,\n        top: Infinity,\n        right: -Infinity,\n        bottom: -Infinity\n      });\n\n      // Add padding\n      const padding = 50;\n      bbox.left -= padding;\n      bbox.top -= padding;\n      bbox.right += padding;\n      bbox.bottom += padding;\n      const width = bbox.right - bbox.left;\n      const height = bbox.bottom - bbox.top;\n\n      // Calculate the zoom level to fit the entire mind map\n      const xZoom = reactFlowWrapper.current.offsetWidth / width;\n      const yZoom = reactFlowWrapper.current.offsetHeight / height;\n      const zoomLevel = Math.min(xZoom, yZoom, 1); // Limit zoom to 1 to prevent excessive enlargement\n\n      // Set the viewport to include all nodes\n      flow.setViewport({\n        x: -bbox.left * zoomLevel,\n        y: -bbox.top * zoomLevel,\n        zoom: zoomLevel\n      }, {\n        duration: 0\n      });\n\n      // Wait for the viewport change to take effect\n      setTimeout(() => {\n        toPng(reactFlowWrapper.current, {\n          backgroundColor: '#ffffff',\n          width: reactFlowWrapper.current.offsetWidth,\n          height: reactFlowWrapper.current.offsetHeight\n        }).then(dataUrl => {\n          const link = document.createElement('a');\n          link.download = 'mind-map.png';\n          link.href = dataUrl;\n          link.click();\n        }).catch(error => {\n          console.error('Error saving mind map:', error);\n        });\n      }, 100);\n    }\n  }, []);\n\n  //     toPng(reactFlowWrapper.current, { \n  //       cacheBust: true, \n  //       backgroundColor: '#ffffff',\n  //       width: width,\n  //       height: height,\n  //       style: {\n  //         width: `${width}px`,\n  //         height: `${height}px`,\n  //       },\n  //     })\n  //       .then((dataUrl) => {\n  //         const link = document.createElement('a');\n  //         link.download = 'mind-map.png';\n  //         link.href = dataUrl;\n  //         link.click();\n  //       })\n  //       .catch((error) => {\n  //         console.error('Error saving mind map:', error);\n  //       });\n  //   }\n  // }, []);\n\n  console.log('MindMap component received data:', data);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    ref: reactFlowWrapper,\n    style: {\n      width: '100%',\n      height: '500px',\n      border: '1px solid black'\n    },\n    children: [/*#__PURE__*/_jsxDEV(ReactFlow, {\n      nodes: nodes,\n      edges: edges,\n      onNodesChange: onNodesChange,\n      onEdgesChange: onEdgesChange,\n      onConnect: onConnect,\n      onNodeClick: handleNodeClick,\n      nodeTypes: nodeTypes,\n      onInit: instance => reactFlowInstance.current = instance,\n      fitView: true,\n      children: [/*#__PURE__*/_jsxDEV(Controls, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 208,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Background, {\n        variant: \"dots\",\n        gap: 12,\n        size: 1\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 209,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 197,\n      columnNumber: 7\n    }, this), editingNode && /*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        position: 'absolute',\n        top: 10,\n        right: 10,\n        background: 'white',\n        padding: 10,\n        zIndex: 1000,\n        borderRadius: '5px',\n        boxShadow: '0 0 10px rgba(0,0,0,0.1)'\n      },\n      children: /*#__PURE__*/_jsxDEV(\"form\", {\n        onSubmit: handleEditSubmit,\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          style: {\n            marginBottom: '10px'\n          },\n          children: [/*#__PURE__*/_jsxDEV(\"label\", {\n            htmlFor: \"nodeName\",\n            children: \"Node Name:\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 224,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n            id: \"nodeName\",\n            name: \"nodeName\",\n            defaultValue: editingNode.data.label,\n            style: {\n              width: '100%'\n            }\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 225,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 223,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          style: {\n            marginBottom: '10px'\n          },\n          children: [/*#__PURE__*/_jsxDEV(\"label\", {\n            htmlFor: \"nodeNote\",\n            children: \"Note:\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 228,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"textarea\", {\n            id: \"nodeNote\",\n            name: \"nodeNote\",\n            defaultValue: editingNode.data.note || '',\n            style: {\n              width: '100%',\n              height: '60px'\n            }\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 229,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 227,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          style: {\n            display: 'flex',\n            justifyContent: 'space-between'\n          },\n          children: [/*#__PURE__*/_jsxDEV(\"button\", {\n            type: \"submit\",\n            children: \"Update\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 232,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n            type: \"button\",\n            onClick: handleAddChild,\n            children: \"Add Child\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 233,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n            type: \"button\",\n            onClick: () => setEditingNode(null),\n            children: \"Cancel\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 234,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 231,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 222,\n        columnNumber: 11\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 221,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: handleSave,\n      style: {\n        position: 'absolute',\n        bottom: 10,\n        right: 10\n      },\n      children: \"Save as PNG\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 239,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 196,\n    columnNumber: 5\n  }, this);\n}\n\n// Helper function to convert mind map data to React Flow format\n_s2(MindMap, \"RX/R8gE+9EO9UzbuX50fSVgWjfY=\", false, function () {\n  return [useNodesState, useEdgesState];\n});\n_c2 = MindMap;\nfunction convertToReactFlowFormat(data, parentId = null, level = 0, index = 0) {\n  const nodes = [];\n  const edges = [];\n  const nodeWidth = 150;\n  const nodeHeight = 50;\n  const horizontalSpacing = 200;\n  const verticalSpacing = 100;\n  function processNode(node, parentId, level, index) {\n    var _node$attributes;\n    const id = `${level}-${index}-${node.name.replace(/\\s+/g, '-').toLowerCase()}`;\n    const x = level * horizontalSpacing;\n    const y = index * verticalSpacing;\n    nodes.push({\n      id,\n      type: 'custom',\n      position: {\n        x,\n        y\n      },\n      data: {\n        label: node.name,\n        note: (_node$attributes = node.attributes) === null || _node$attributes === void 0 ? void 0 : _node$attributes.note\n      },\n      style: {\n        width: nodeWidth,\n        height: nodeHeight\n      }\n    });\n    if (parentId) {\n      edges.push({\n        id: `${parentId}-${id}`,\n        source: parentId,\n        target: id,\n        type: 'smoothstep'\n      });\n    }\n    if (node.children) {\n      node.children.forEach((child, childIndex) => {\n        const {\n          childNodes,\n          childEdges\n        } = processNode(child, id, level + 1, childIndex);\n        nodes.push(...childNodes);\n        edges.push(...childEdges);\n      });\n    }\n    return {\n      childNodes: nodes,\n      childEdges: edges\n    };\n  }\n  const {\n    childNodes,\n    childEdges\n  } = processNode(data, parentId, level, index);\n  return {\n    nodes: childNodes,\n    edges: childEdges\n  };\n}\nexport default MindMap;\nvar _c, _c2;\n$RefreshReg$(_c, \"CustomNode\");\n$RefreshReg$(_c2, \"MindMap\");","map":{"version":3,"names":["React","useState","useCallback","useRef","ReactFlow","Controls","Background","useNodesState","useEdgesState","addEdge","toPng","jsxDEV","_jsxDEV","CustomNode","data","_s","isEditing","setIsEditing","label","setLabel","handleDoubleClick","handleBlur","onNodesChange","style","padding","border","borderRadius","background","minWidth","onDoubleClick","children","type","value","onChange","e","target","onBlur","autoFocus","fileName","_jsxFileName","lineNumber","columnNumber","_c","nodeTypes","custom","MindMap","onUpdate","_s2","nodes","setNodes","edges","setEdges","onEdgesChange","editingNode","setEditingNode","reactFlowWrapper","reactFlowInstance","useEffect","newNodes","newEdges","convertToReactFlowFormat","onConnect","params","eds","handleNodeClick","event","node","handleEditSubmit","preventDefault","updatedNode","elements","nodeName","note","nodeNote","nds","map","id","handleAddChild","newChildId","Date","now","newChild","position","x","y","newEdge","source","handleSave","current","flow","toObject","bbox","reduce","acc","left","Math","min","top","right","max","width","bottom","height","Infinity","xZoom","offsetWidth","yZoom","offsetHeight","zoomLevel","setViewport","zoom","duration","setTimeout","backgroundColor","then","dataUrl","link","document","createElement","download","href","click","catch","error","console","log","ref","onNodeClick","onInit","instance","fitView","variant","gap","size","zIndex","boxShadow","onSubmit","marginBottom","htmlFor","name","defaultValue","display","justifyContent","onClick","_c2","parentId","level","index","nodeWidth","nodeHeight","horizontalSpacing","verticalSpacing","processNode","_node$attributes","replace","toLowerCase","push","attributes","forEach","child","childIndex","childNodes","childEdges","$RefreshReg$"],"sources":["C:/Users/alexa/chat_based_mmapp/frontend/src/components/MindMap.js"],"sourcesContent":["import React, { useState, useCallback, useRef } from 'react';\r\nimport ReactFlow, {\r\n  Controls,\r\n  Background,\r\n  useNodesState,\r\n  useEdgesState,\r\n  addEdge,\r\n} from 'reactflow';\r\nimport 'reactflow/dist/style.css';\r\nimport { toPng } from 'html-to-image';\r\n\r\n// Custom node component\r\nconst CustomNode = ({ data }) => {\r\n  const [isEditing, setIsEditing] = useState(false);\r\n  const [label, setLabel] = useState(data.label);\r\n\r\n  const handleDoubleClick = () => {\r\n    setIsEditing(true);\r\n  }\r\n\r\n  const handleBlur =() => {\r\n    setIsEditing(false);\r\n    data.onNodesChange(label);\r\n  }\r\n  \r\n  return (\r\n    <div\r\n      style={{\r\n        padding: '10px',\r\n        border: '1px solid #ddd',\r\n        borderRadius: '5px',\r\n        background: 'white',\r\n        minWidth: '150px',\r\n      }}\r\n      onDoubleClick={handleDoubleClick}\r\n    >\r\n      {isEditing ? (\r\n        <input\r\n          type=\"text\"\r\n          value={label}\r\n          onChange={(e) => setLabel(e.target.value)}\r\n          onBlur={handleBlur}\r\n          autoFocus\r\n        />\r\n      ) : (\r\n        <div>{label}</div>\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n\r\nconst nodeTypes = {\r\n  custom: CustomNode,\r\n};\r\n\r\nfunction MindMap({ data, onUpdate }) {\r\n  const [nodes, setNodes, onNodesChange] = useNodesState([]);\r\n  const [edges, setEdges, onEdgesChange] = useEdgesState([]);\r\n  // const [translate, setTranslate] = useState({ x: 300, y: 50 });\r\n  const [editingNode, setEditingNode] = useState(null);\r\n  const reactFlowWrapper = useRef(null);\r\n  const reactFlowInstance = useRef(null);\r\n\r\n  // Convert mind map data to React Flow format\r\n  React.useEffect(() => {\r\n    if (data) {\r\n      const { nodes: newNodes, edges: newEdges } = convertToReactFlowFormat(data);\r\n      setNodes(newNodes);\r\n      setEdges(newEdges);\r\n    }\r\n  }, [data, setNodes, setEdges]);\r\n\r\n  const onConnect = useCallback((params) => setEdges((eds) => addEdge(params, eds)), [setEdges]);\r\n  \r\n  const handleNodeClick = (event, node) => {\r\n    // Handle node click for editing\r\n    setEditingNode(node);\r\n  };\r\n\r\n  const handleEditSubmit = (e) => {\r\n    e.preventDefault();\r\n    const updatedNode = {\r\n      ...editingNode,\r\n      data: {\r\n        ...editingNode.data,\r\n        label: e.target.elements.nodeName.value,\r\n        note: e.target.elements.nodeNote.value,\r\n      },\r\n    };\r\n    setNodes((nds) => nds.map((node) => (node.id === updatedNode.id ? updatedNode : node)));\r\n    onUpdate({ updatedNode });\r\n    setEditingNode(null);\r\n  };\r\n\r\n  const handleAddChild = () => {\r\n    const newChildId = `${editingNode.id}-child-${Date.now()}`;\r\n    const newChild = {\r\n      id: newChildId,\r\n      type: 'custom',\r\n      position: { x: editingNode.position.x + 200, y: editingNode.position.y },\r\n      data: { label: 'New Child', note: '' },\r\n    };\r\n    const newEdge = { id: `${editingNode.id}-${newChildId}`, source: editingNode.id, target: newChildId, type: 'smoothstep' };\r\n    \r\n    setNodes((nds) => [...nds, newChild]);\r\n    setEdges((eds) => [...eds, newEdge]);\r\n    onUpdate({ updatedNode: newChild });\r\n  };\r\n\r\n  const handleSave = useCallback(() => {\r\n    if (reactFlowInstance.current && reactFlowWrapper.current) {\r\n      const flow = reactFlowInstance.current;\r\n      const { nodes, edges } = flow.toObject();\r\n\r\n    // Calculate the bounding box of all nodes\r\n    const bbox = nodes.reduce(\r\n      (acc, node) => {\r\n        acc.left = Math.min(acc.left, node.position.x);\r\n        acc.top = Math.min(acc.top, node.position.y);\r\n        acc.right = Math.max(acc.right, node.position.x + (node.width || 0));\r\n        acc.bottom = Math.max(acc.bottom, node.position.y + (node.height || 0));\r\n        return acc;\r\n      },\r\n      { left: Infinity, top: Infinity, right: -Infinity, bottom: -Infinity }\r\n    );\r\n\r\n    // Add padding\r\n    const padding = 50;\r\n    bbox.left -= padding;\r\n    bbox.top -= padding;\r\n    bbox.right += padding;\r\n    bbox.bottom += padding;\r\n\r\n    const width = bbox.right - bbox.left;\r\n    const height = bbox.bottom - bbox.top;\r\n\r\n    // Calculate the zoom level to fit the entire mind map\r\n    const xZoom = reactFlowWrapper.current.offsetWidth / width;\r\n    const yZoom = reactFlowWrapper.current.offsetHeight / height;\r\n    const zoomLevel = Math.min(xZoom, yZoom, 1); // Limit zoom to 1 to prevent excessive enlargement\r\n\r\n    // Set the viewport to include all nodes\r\n    flow.setViewport(\r\n      {\r\n        x: -bbox.left * zoomLevel,\r\n        y: -bbox.top * zoomLevel,\r\n        zoom: zoomLevel,\r\n      },\r\n      { duration: 0 }\r\n    );\r\n\r\n    // Wait for the viewport change to take effect\r\n    setTimeout(() => {\r\n      toPng(reactFlowWrapper.current, {\r\n        backgroundColor: '#ffffff',\r\n        width: reactFlowWrapper.current.offsetWidth,\r\n        height: reactFlowWrapper.current.offsetHeight,\r\n      })\r\n        .then((dataUrl) => {\r\n          const link = document.createElement('a');\r\n          link.download = 'mind-map.png';\r\n          link.href = dataUrl;\r\n          link.click();\r\n        })\r\n        .catch((error) => {\r\n          console.error('Error saving mind map:', error);\r\n        });\r\n    }, 100);\r\n  }\r\n}, []);\r\n    \r\n  //     toPng(reactFlowWrapper.current, { \r\n  //       cacheBust: true, \r\n  //       backgroundColor: '#ffffff',\r\n  //       width: width,\r\n  //       height: height,\r\n  //       style: {\r\n  //         width: `${width}px`,\r\n  //         height: `${height}px`,\r\n  //       },\r\n  //     })\r\n  //       .then((dataUrl) => {\r\n  //         const link = document.createElement('a');\r\n  //         link.download = 'mind-map.png';\r\n  //         link.href = dataUrl;\r\n  //         link.click();\r\n  //       })\r\n  //       .catch((error) => {\r\n  //         console.error('Error saving mind map:', error);\r\n  //       });\r\n  //   }\r\n  // }, []);\r\n\r\n  console.log('MindMap component received data:', data)\r\n  return (\r\n    <div ref={reactFlowWrapper} style={{ width: '100%', height: '500px', border: '1px solid black' }}>\r\n      <ReactFlow\r\n        nodes={nodes}\r\n        edges={edges}\r\n        onNodesChange={onNodesChange}\r\n        onEdgesChange={onEdgesChange}\r\n        onConnect={onConnect}\r\n        onNodeClick={handleNodeClick}\r\n        nodeTypes={nodeTypes}\r\n        onInit={(instance) => (reactFlowInstance.current = instance)}\r\n        fitView\r\n      >\r\n        <Controls />\r\n        <Background variant=\"dots\" gap={12} size={1} />\r\n      </ReactFlow>\r\n      {/* {editingNode && (\r\n        <div style={{ position: 'absolute', top:10, right:10, background: 'white', padding:10, zIndex: 1000}}>\r\n          <form onSubmit={handleEditSubmit}>\r\n            <input name=\"nodeName\" defaultValue={editingNode.data.label} />\r\n            <textarea name=\"nodeNote\" defaultValue={editingNode.data.note || ''} />\r\n            <button type=\"submit\">Update</button>\r\n          </form> \r\n        </div>\r\n      )} */}\r\n      {editingNode && (\r\n        <div style={{ position: 'absolute', top: 10, right: 10, background: 'white', padding: 10, zIndex: 1000, borderRadius: '5px', boxShadow: '0 0 10px rgba(0,0,0,0.1)' }}>\r\n          <form onSubmit={handleEditSubmit}>\r\n            <div style={{ marginBottom: '10px' }}>\r\n              <label htmlFor=\"nodeName\">Node Name:</label>\r\n              <input id=\"nodeName\" name=\"nodeName\" defaultValue={editingNode.data.label} style={{ width: '100%' }} />\r\n            </div>\r\n            <div style={{ marginBottom: '10px' }}>\r\n              <label htmlFor=\"nodeNote\">Note:</label>\r\n              <textarea id=\"nodeNote\" name=\"nodeNote\" defaultValue={editingNode.data.note || ''} style={{ width: '100%', height: '60px' }} />\r\n            </div>\r\n            <div style={{ display: 'flex', justifyContent: 'space-between' }}>\r\n              <button type=\"submit\">Update</button>\r\n              <button type=\"button\" onClick={handleAddChild}>Add Child</button>\r\n              <button type=\"button\" onClick={() => setEditingNode(null)}>Cancel</button>\r\n            </div>\r\n          </form>\r\n        </div>\r\n      )}\r\n      <button onClick={handleSave} style={{ position: 'absolute', bottom: 10, right: 10 }} >Save as PNG</button>\r\n    </div>\r\n\r\n  );\r\n}\r\n\r\n// Helper function to convert mind map data to React Flow format\r\nfunction convertToReactFlowFormat(data, parentId = null, level = 0, index = 0) {\r\n  const nodes = [];\r\n  const edges = [];\r\n\r\n  const nodeWidth = 150;\r\n  const nodeHeight = 50;\r\n  const horizontalSpacing = 200;\r\n  const verticalSpacing = 100;\r\n\r\n  function processNode(node, parentId, level , index) {\r\n    const id = `${level}-${index}-${node.name.replace(/\\s+/g, '-').toLowerCase()}`;\r\n    const x = level * horizontalSpacing;\r\n    const y = index * verticalSpacing;    \r\n    nodes.push({\r\n      id,\r\n      type: 'custom',\r\n      position: { x, y },\r\n      data: { label: node.name, note: node.attributes?.note },\r\n      style: { width: nodeWidth, height: nodeHeight },\r\n    });\r\n\r\n    if (parentId) {\r\n      edges.push({ id: `${parentId}-${id}`, source: parentId, target: id, type: 'smoothstep' });\r\n    }\r\n\r\n    if (node.children) {\r\n      node.children.forEach((child, childIndex) => {\r\n        const { childNodes, childEdges } = processNode(child, id, level+1, childIndex);\r\n        nodes.push(...childNodes);\r\n        edges.push(...childEdges);\r\n      });\r\n    }\r\n\r\n    return { childNodes: nodes, childEdges: edges };\r\n  }\r\n\r\n  const { childNodes, childEdges } = processNode(data, parentId, level, index);\r\n  return { nodes: childNodes, edges: childEdges };\r\n}\r\n\r\nexport default MindMap;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}