{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\alexa\\\\chat_based_mmapp\\\\frontend\\\\src\\\\components\\\\MindMap.js\",\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$();\nimport React, { useState, useCallback, useRef } from 'react';\nimport ReactFlow, { Controls, Background, useNodesState, useEdgesState, addEdge } from 'reactflow';\nimport 'reactflow/dist/style.css';\nimport { toPng } from 'html-to-image';\n\n// Custom node component\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst CustomNode = ({\n  data,\n  isConnectable\n}) => {\n  _s();\n  const [isEditing, setIsEditing] = useState(false);\n  const [label, setLabel] = useState(data.label);\n  const handleDoubleClick = () => {\n    setIsEditing(true);\n  };\n  const handleBlur = () => {\n    setIsEditing(false);\n    data.onNodesChange(label);\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    style: {\n      padding: '10px',\n      border: '1px solid #ddd',\n      borderRadius: '5px',\n      background: 'white',\n      minWidth: '150px'\n    },\n    onDoubleClick: handleDoubleClick,\n    children: isEditing ? /*#__PURE__*/_jsxDEV(\"input\", {\n      type: \"text\",\n      value: label,\n      onChange: e => setLabel(e.target.value),\n      onBlur: handleBlur,\n      autoFocus: true\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 38,\n      columnNumber: 9\n    }, this) : /*#__PURE__*/_jsxDEV(\"div\", {\n      children: label\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 46,\n      columnNumber: 9\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 27,\n    columnNumber: 5\n  }, this);\n};\n_s(CustomNode, \"Tg9Xh/Z+ACc9XnAD07WHfiY+uiA=\");\n_c = CustomNode;\nconst nodeTypes = {\n  custom: CustomNode\n};\nfunction MindMap({\n  data,\n  onUpdate\n}) {\n  _s2();\n  const [nodes, setNodes, onNodesChange] = useNodesState([]);\n  const [edges, setEdges, onEdgesChange] = useEdgesState([]);\n  // const [translate, setTranslate] = useState({ x: 300, y: 50 });\n  // const [editingNode, setEditingNode] = useState(null);\n  const reactFlowWrapper = useRef(null);\n  const reactFlowInstance = useRef(null);\n\n  // Convert mind map data to React Flow format\n  React.useEffect(() => {\n    if (data) {\n      const {\n        nodes: newNodes,\n        edges: newEdges\n      } = convertToReactFlowFormat(data);\n      setNodes(newNodes);\n      setEdges(newEdges);\n    }\n  }, [data, setNodes, setEdges]);\n  const onConnect = useCallback(params => setEdges(eds => addEdge(params, eds)), [setEdges]);\n  const onNodeChange = useCallback((nodeId, newLabel) => {\n    setNodes(nds => nds.map(node => node.id === nodeId ? {\n      ...node,\n      data: {\n        ...node.data,\n        label: newLabel\n      }\n    } : node));\n  }, [setNodes]);\n  const onAddChild = useCallback(parentNode => {\n    const newNode = {\n      id: `node-${Date.now()}`,\n      type: 'custom',\n      position: {\n        x: parentNode.position.x + 200,\n        y: parentNode.position.y\n      },\n      data: {\n        label: 'New Node',\n        onNodeChange: label => onNodeChange(`node-${Date.now()}`, label)\n      }\n    };\n    setNodes(nds => [...nds, newNode]);\n    setEdges(eds => [...eds, {\n      id: `edge-${parentNode.id}-${newNode.id}`,\n      source: parentNode.id,\n      target: newNode.id\n    }]);\n  }, [setNodes, setEdges, onNodeChange]);\n  React.useEffect(() => {\n    if (initialData) {\n      const rootNode = {\n        id: 'root',\n        type: 'custom',\n        position: {\n          x: 0,\n          y: 0\n        },\n        data: {\n          label: initialData.name,\n          onNodeChange: label => onNodeChange('root', label)\n        }\n      };\n      setNodes([rootNode]);\n    }\n  }, [initialData, setNodes, onNodeChange]);\n  const onDragOver = useCallback(event => {\n    event.preventDefault();\n    event.dataTransfer.dropEffect = 'move';\n  }, []);\n  const onDrop = useCallback(event => {\n    event.preventDefault();\n    const reactFlowBounds = reactFlowWrapper.current.getBoundingClientRect();\n    const type = event.dataTransfer.getData('application/reactflow');\n    if (typeof type === 'undefined' || !type) {\n      return;\n    }\n    const position = reactFlowInstance.current.project({\n      x: event.clientX - reactFlowBounds.left,\n      y: event.clientY - reactFlowBounds.top\n    });\n    const newNode = {\n      id: `node-${Date.now()}`,\n      type,\n      position,\n      data: {\n        label: `${type} node`,\n        onNodeChange: label => onNodeChange(`node-${Date.now()}`, label)\n      }\n    };\n    setNodes(nds => nds.concat(newNode));\n  }, [setNodes, onNodeChange]);\n  // const handleNodeClick = (event, node) => {\n  //   // Handle node click for editing\n  //   setEditingNode(node);\n  // };\n\n  // const handleEditSubmit = (e) => {\n  //   e.preventDefault();\n  //   const updatedNode = {\n  //     ...editingNode,\n  //     data: {\n  //       ...editingNode.data,\n  //       label: e.target.elements.nodeName.value,\n  //       note: e.target.elements.nodeNote.value,\n  //     },\n  //   };\n  //   setNodes((nds) => nds.map((node) => (node.id === updatedNode.id ? updatedNode : node)));\n  //   onUpdate({ updatedNode });\n  //   setEditingNode(null);\n  // };\n\n  // const handleAddChild = () => {\n  //   const newChildId = `${editingNode.id}-child-${Date.now()}`;\n  //   const newChild = {\n  //     id: newChildId,\n  //     type: 'custom',\n  //     position: { x: editingNode.position.x + 200, y: editingNode.position.y },\n  //     data: { label: 'New Child', note: '' },\n  //   };\n  //   const newEdge = { id: `${editingNode.id}-${newChildId}`, source: editingNode.id, target: newChildId, type: 'smoothstep' };\n\n  //   setNodes((nds) => [...nds, newChild]);\n  //   setEdges((eds) => [...eds, newEdge]);\n  //   onUpdate({ updatedNode: newChild });\n  // };\n\n  const handleSave = useCallback(() => {\n    if (reactFlowInstance.current && reactFlowWrapper.current) {\n      const flow = reactFlowInstance.current;\n      const {\n        nodes,\n        edges\n      } = flow.toObject();\n\n      // Calculate the bounding box of all nodes\n      const bbox = nodes.reduce((acc, node) => {\n        acc.left = Math.min(acc.left, node.position.x);\n        acc.top = Math.min(acc.top, node.position.y);\n        acc.right = Math.max(acc.right, node.position.x + (node.width || 0));\n        acc.bottom = Math.max(acc.bottom, node.position.y + (node.height || 0));\n        return acc;\n      }, {\n        left: Infinity,\n        top: Infinity,\n        right: -Infinity,\n        bottom: -Infinity\n      });\n\n      // Add padding\n      const padding = 50;\n      bbox.left -= padding;\n      bbox.top -= padding;\n      bbox.right += padding;\n      bbox.bottom += padding;\n      const width = bbox.right - bbox.left;\n      const height = bbox.bottom - bbox.top;\n\n      // Calculate the zoom level to fit the entire mind map\n      const xZoom = reactFlowWrapper.current.offsetWidth / width;\n      const yZoom = reactFlowWrapper.current.offsetHeight / height;\n      const zoomLevel = Math.min(xZoom, yZoom, 1); // Limit zoom to 1 to prevent excessive enlargement\n\n      // Set the viewport to include all nodes\n      flow.setViewport({\n        x: -bbox.left * zoomLevel,\n        y: -bbox.top * zoomLevel,\n        zoom: zoomLevel\n      }, {\n        duration: 0\n      });\n\n      // Wait for the viewport change to take effect\n      setTimeout(() => {\n        toPng(reactFlowWrapper.current, {\n          backgroundColor: '#ffffff',\n          width: reactFlowWrapper.current.offsetWidth,\n          height: reactFlowWrapper.current.offsetHeight\n        }).then(dataUrl => {\n          const link = document.createElement('a');\n          link.download = 'mind-map.png';\n          link.href = dataUrl;\n          link.click();\n        }).catch(error => {\n          console.error('Error saving mind map:', error);\n        });\n      }, 100);\n    }\n  }, []);\n\n  //     toPng(reactFlowWrapper.current, { \n  //       cacheBust: true, \n  //       backgroundColor: '#ffffff',\n  //       width: width,\n  //       height: height,\n  //       style: {\n  //         width: `${width}px`,\n  //         height: `${height}px`,\n  //       },\n  //     })\n  //       .then((dataUrl) => {\n  //         const link = document.createElement('a');\n  //         link.download = 'mind-map.png';\n  //         link.href = dataUrl;\n  //         link.click();\n  //       })\n  //       .catch((error) => {\n  //         console.error('Error saving mind map:', error);\n  //       });\n  //   }\n  // }, []);\n\n  console.log('MindMap component received data:', data);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    ref: reactFlowWrapper,\n    style: {\n      width: '100%',\n      height: '500px',\n      border: '1px solid black'\n    },\n    children: [/*#__PURE__*/_jsxDEV(ReactFlow, {\n      nodes: nodes,\n      edges: edges,\n      onNodesChange: onNodesChange,\n      onEdgesChange: onEdgesChange,\n      onConnect: onConnect\n      // onNodeClick={handleNodeClick}\n      ,\n      nodeTypes: nodeTypes,\n      onInit: instance => reactFlowInstance.current = instance,\n      onDrop: onDrop,\n      onDragOver: onDragOver,\n      fitView: true,\n      children: [/*#__PURE__*/_jsxDEV(Controls, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 288,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Background, {\n        variant: \"dots\",\n        gap: 12,\n        size: 1\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 289,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 275,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        position: 'absolute',\n        right: 10,\n        top: 10\n      },\n      children: /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: () => onAddChild(nodes[0]),\n        children: \"Add Child Node\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 320,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 319,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: handleSave,\n      style: {\n        position: 'absolute',\n        bottom: 10,\n        right: 10\n      },\n      children: \"Save as PNG\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 322,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 274,\n    columnNumber: 5\n  }, this);\n}\n\n// Helper function to convert mind map data to React Flow format\n_s2(MindMap, \"0IYq8uYBFDZnzeE4GJXNrlL/x5w=\", false, function () {\n  return [useNodesState, useEdgesState];\n});\n_c2 = MindMap;\nfunction convertToReactFlowFormat(data, parentId = null, level = 0, index = 0) {\n  const nodes = [];\n  const edges = [];\n  const nodeWidth = 150;\n  const nodeHeight = 50;\n  const horizontalSpacing = 200;\n  const verticalSpacing = 100;\n  function processNode(node, parentId, level, index) {\n    var _node$attributes;\n    const id = `${level}-${index}-${node.name.replace(/\\s+/g, '-').toLowerCase()}`;\n    const x = level * horizontalSpacing;\n    const y = index * verticalSpacing;\n    nodes.push({\n      id,\n      type: 'custom',\n      position: {\n        x,\n        y\n      },\n      data: {\n        label: node.name,\n        note: (_node$attributes = node.attributes) === null || _node$attributes === void 0 ? void 0 : _node$attributes.note\n      },\n      style: {\n        width: nodeWidth,\n        height: nodeHeight\n      }\n    });\n    if (parentId) {\n      edges.push({\n        id: `${parentId}-${id}`,\n        source: parentId,\n        target: id,\n        type: 'smoothstep'\n      });\n    }\n    if (node.children) {\n      node.children.forEach((child, childIndex) => {\n        const {\n          childNodes,\n          childEdges\n        } = processNode(child, id, level + 1, childIndex);\n        nodes.push(...childNodes);\n        edges.push(...childEdges);\n      });\n    }\n    return {\n      childNodes: nodes,\n      childEdges: edges\n    };\n  }\n  const {\n    childNodes,\n    childEdges\n  } = processNode(data, parentId, level, index);\n  return {\n    nodes: childNodes,\n    edges: childEdges\n  };\n}\nexport default MindMap;\nvar _c, _c2;\n$RefreshReg$(_c, \"CustomNode\");\n$RefreshReg$(_c2, \"MindMap\");","map":{"version":3,"names":["React","useState","useCallback","useRef","ReactFlow","Controls","Background","useNodesState","useEdgesState","addEdge","toPng","jsxDEV","_jsxDEV","CustomNode","data","isConnectable","_s","isEditing","setIsEditing","label","setLabel","handleDoubleClick","handleBlur","onNodesChange","style","padding","border","borderRadius","background","minWidth","onDoubleClick","children","type","value","onChange","e","target","onBlur","autoFocus","fileName","_jsxFileName","lineNumber","columnNumber","_c","nodeTypes","custom","MindMap","onUpdate","_s2","nodes","setNodes","edges","setEdges","onEdgesChange","reactFlowWrapper","reactFlowInstance","useEffect","newNodes","newEdges","convertToReactFlowFormat","onConnect","params","eds","onNodeChange","nodeId","newLabel","nds","map","node","id","onAddChild","parentNode","newNode","Date","now","position","x","y","source","initialData","rootNode","name","onDragOver","event","preventDefault","dataTransfer","dropEffect","onDrop","reactFlowBounds","current","getBoundingClientRect","getData","project","clientX","left","clientY","top","concat","handleSave","flow","toObject","bbox","reduce","acc","Math","min","right","max","width","bottom","height","Infinity","xZoom","offsetWidth","yZoom","offsetHeight","zoomLevel","setViewport","zoom","duration","setTimeout","backgroundColor","then","dataUrl","link","document","createElement","download","href","click","catch","error","console","log","ref","onInit","instance","fitView","variant","gap","size","onClick","_c2","parentId","level","index","nodeWidth","nodeHeight","horizontalSpacing","verticalSpacing","processNode","_node$attributes","replace","toLowerCase","push","note","attributes","forEach","child","childIndex","childNodes","childEdges","$RefreshReg$"],"sources":["C:/Users/alexa/chat_based_mmapp/frontend/src/components/MindMap.js"],"sourcesContent":["import React, { useState, useCallback, useRef } from 'react';\r\nimport ReactFlow, {\r\n  Controls,\r\n  Background,\r\n  useNodesState,\r\n  useEdgesState,\r\n  addEdge,\r\n} from 'reactflow';\r\nimport 'reactflow/dist/style.css';\r\nimport { toPng } from 'html-to-image';\r\n\r\n// Custom node component\r\nconst CustomNode = ({ data, isConnectable }) => {\r\n  const [isEditing, setIsEditing] = useState(false);\r\n  const [label, setLabel] = useState(data.label);\r\n\r\n  const handleDoubleClick = () => {\r\n    setIsEditing(true);\r\n  }\r\n\r\n  const handleBlur =() => {\r\n    setIsEditing(false);\r\n    data.onNodesChange(label);\r\n  }\r\n  \r\n  return (\r\n    <div\r\n      style={{\r\n        padding: '10px',\r\n        border: '1px solid #ddd',\r\n        borderRadius: '5px',\r\n        background: 'white',\r\n        minWidth: '150px',\r\n      }}\r\n      onDoubleClick={handleDoubleClick}\r\n    >\r\n      {isEditing ? (\r\n        <input\r\n          type=\"text\"\r\n          value={label}\r\n          onChange={(e) => setLabel(e.target.value)}\r\n          onBlur={handleBlur}\r\n          autoFocus\r\n        />\r\n      ) : (\r\n        <div>{label}</div>\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n\r\nconst nodeTypes = {\r\n  custom: CustomNode,\r\n};\r\n\r\nfunction MindMap({ data, onUpdate }) {\r\n  const [nodes, setNodes, onNodesChange] = useNodesState([]);\r\n  const [edges, setEdges, onEdgesChange] = useEdgesState([]);\r\n  // const [translate, setTranslate] = useState({ x: 300, y: 50 });\r\n  // const [editingNode, setEditingNode] = useState(null);\r\n  const reactFlowWrapper = useRef(null);\r\n  const reactFlowInstance = useRef(null);\r\n\r\n  // Convert mind map data to React Flow format\r\n  React.useEffect(() => {\r\n    if (data) {\r\n      const { nodes: newNodes, edges: newEdges } = convertToReactFlowFormat(data);\r\n      setNodes(newNodes);\r\n      setEdges(newEdges);\r\n    }\r\n  }, [data, setNodes, setEdges]);\r\n\r\n  const onConnect = useCallback((params) => setEdges((eds) => addEdge(params, eds)), [setEdges]);\r\n  \r\n  const onNodeChange = useCallback(\r\n    (nodeId, newLabel) => {\r\n      setNodes((nds) =>\r\n        nds.map((node) =>\r\n          node.id === nodeId ? { ...node, data: { ...node.data, label: newLabel } } : node\r\n        )\r\n      );\r\n    },\r\n    [setNodes]\r\n  );\r\n\r\n  const onAddChild = useCallback(\r\n    (parentNode) => {\r\n      const newNode = {\r\n        id: `node-${Date.now()}`,\r\n        type: 'custom',\r\n        position: {\r\n          x: parentNode.position.x + 200,\r\n          y: parentNode.position.y,\r\n        },\r\n        data: { label: 'New Node', onNodeChange: (label) => onNodeChange(`node-${Date.now()}`, label) },\r\n      };\r\n      setNodes((nds) => [...nds, newNode]);\r\n      setEdges((eds) => [\r\n        ...eds,\r\n        {\r\n          id: `edge-${parentNode.id}-${newNode.id}`,\r\n          source: parentNode.id,\r\n          target: newNode.id,\r\n        },\r\n      ]);\r\n    },\r\n    [setNodes, setEdges, onNodeChange]\r\n  );\r\n\r\n  React.useEffect(() => {\r\n    if (initialData) {\r\n      const rootNode = {\r\n        id: 'root',\r\n        type: 'custom',\r\n        position: { x: 0, y: 0 },\r\n        data: { label: initialData.name, onNodeChange: (label) => onNodeChange('root', label) },\r\n      };\r\n      setNodes([rootNode]);\r\n    }\r\n  }, [initialData, setNodes, onNodeChange]);\r\n\r\n  const onDragOver = useCallback((event) => {\r\n    event.preventDefault();\r\n    event.dataTransfer.dropEffect = 'move';\r\n  }, []);\r\n\r\n  const onDrop = useCallback(\r\n    (event) => {\r\n      event.preventDefault();\r\n\r\n      const reactFlowBounds = reactFlowWrapper.current.getBoundingClientRect();\r\n      const type = event.dataTransfer.getData('application/reactflow');\r\n\r\n      if (typeof type === 'undefined' || !type) {\r\n        return;\r\n      }\r\n\r\n      const position = reactFlowInstance.current.project({\r\n        x: event.clientX - reactFlowBounds.left,\r\n        y: event.clientY - reactFlowBounds.top,\r\n      });\r\n      const newNode = {\r\n        id: `node-${Date.now()}`,\r\n        type,\r\n        position,\r\n        data: { label: `${type} node`, onNodeChange: (label) => onNodeChange(`node-${Date.now()}`, label) },\r\n      };\r\n\r\n      setNodes((nds) => nds.concat(newNode));\r\n    },\r\n    [setNodes, onNodeChange]\r\n  );\r\n  // const handleNodeClick = (event, node) => {\r\n  //   // Handle node click for editing\r\n  //   setEditingNode(node);\r\n  // };\r\n\r\n  // const handleEditSubmit = (e) => {\r\n  //   e.preventDefault();\r\n  //   const updatedNode = {\r\n  //     ...editingNode,\r\n  //     data: {\r\n  //       ...editingNode.data,\r\n  //       label: e.target.elements.nodeName.value,\r\n  //       note: e.target.elements.nodeNote.value,\r\n  //     },\r\n  //   };\r\n  //   setNodes((nds) => nds.map((node) => (node.id === updatedNode.id ? updatedNode : node)));\r\n  //   onUpdate({ updatedNode });\r\n  //   setEditingNode(null);\r\n  // };\r\n\r\n  // const handleAddChild = () => {\r\n  //   const newChildId = `${editingNode.id}-child-${Date.now()}`;\r\n  //   const newChild = {\r\n  //     id: newChildId,\r\n  //     type: 'custom',\r\n  //     position: { x: editingNode.position.x + 200, y: editingNode.position.y },\r\n  //     data: { label: 'New Child', note: '' },\r\n  //   };\r\n  //   const newEdge = { id: `${editingNode.id}-${newChildId}`, source: editingNode.id, target: newChildId, type: 'smoothstep' };\r\n    \r\n  //   setNodes((nds) => [...nds, newChild]);\r\n  //   setEdges((eds) => [...eds, newEdge]);\r\n  //   onUpdate({ updatedNode: newChild });\r\n  // };\r\n\r\n  const handleSave = useCallback(() => {\r\n    if (reactFlowInstance.current && reactFlowWrapper.current) {\r\n      const flow = reactFlowInstance.current;\r\n      const { nodes, edges } = flow.toObject();\r\n\r\n    // Calculate the bounding box of all nodes\r\n    const bbox = nodes.reduce(\r\n      (acc, node) => {\r\n        acc.left = Math.min(acc.left, node.position.x);\r\n        acc.top = Math.min(acc.top, node.position.y);\r\n        acc.right = Math.max(acc.right, node.position.x + (node.width || 0));\r\n        acc.bottom = Math.max(acc.bottom, node.position.y + (node.height || 0));\r\n        return acc;\r\n      },\r\n      { left: Infinity, top: Infinity, right: -Infinity, bottom: -Infinity }\r\n    );\r\n\r\n    // Add padding\r\n    const padding = 50;\r\n    bbox.left -= padding;\r\n    bbox.top -= padding;\r\n    bbox.right += padding;\r\n    bbox.bottom += padding;\r\n\r\n    const width = bbox.right - bbox.left;\r\n    const height = bbox.bottom - bbox.top;\r\n\r\n    // Calculate the zoom level to fit the entire mind map\r\n    const xZoom = reactFlowWrapper.current.offsetWidth / width;\r\n    const yZoom = reactFlowWrapper.current.offsetHeight / height;\r\n    const zoomLevel = Math.min(xZoom, yZoom, 1); // Limit zoom to 1 to prevent excessive enlargement\r\n\r\n    // Set the viewport to include all nodes\r\n    flow.setViewport(\r\n      {\r\n        x: -bbox.left * zoomLevel,\r\n        y: -bbox.top * zoomLevel,\r\n        zoom: zoomLevel,\r\n      },\r\n      { duration: 0 }\r\n    );\r\n\r\n    // Wait for the viewport change to take effect\r\n    setTimeout(() => {\r\n      toPng(reactFlowWrapper.current, {\r\n        backgroundColor: '#ffffff',\r\n        width: reactFlowWrapper.current.offsetWidth,\r\n        height: reactFlowWrapper.current.offsetHeight,\r\n      })\r\n        .then((dataUrl) => {\r\n          const link = document.createElement('a');\r\n          link.download = 'mind-map.png';\r\n          link.href = dataUrl;\r\n          link.click();\r\n        })\r\n        .catch((error) => {\r\n          console.error('Error saving mind map:', error);\r\n        });\r\n    }, 100);\r\n  }\r\n}, []);\r\n    \r\n  //     toPng(reactFlowWrapper.current, { \r\n  //       cacheBust: true, \r\n  //       backgroundColor: '#ffffff',\r\n  //       width: width,\r\n  //       height: height,\r\n  //       style: {\r\n  //         width: `${width}px`,\r\n  //         height: `${height}px`,\r\n  //       },\r\n  //     })\r\n  //       .then((dataUrl) => {\r\n  //         const link = document.createElement('a');\r\n  //         link.download = 'mind-map.png';\r\n  //         link.href = dataUrl;\r\n  //         link.click();\r\n  //       })\r\n  //       .catch((error) => {\r\n  //         console.error('Error saving mind map:', error);\r\n  //       });\r\n  //   }\r\n  // }, []);\r\n\r\n  console.log('MindMap component received data:', data)\r\n  return (\r\n    <div ref={reactFlowWrapper} style={{ width: '100%', height: '500px', border: '1px solid black' }}>\r\n      <ReactFlow\r\n        nodes={nodes}\r\n        edges={edges}\r\n        onNodesChange={onNodesChange}\r\n        onEdgesChange={onEdgesChange}\r\n        onConnect={onConnect}\r\n        // onNodeClick={handleNodeClick}\r\n        nodeTypes={nodeTypes}\r\n        onInit={(instance) => (reactFlowInstance.current = instance)}\r\n        onDrop={onDrop}\r\n        onDragOver={onDragOver}\r\n        fitView\r\n      >\r\n        <Controls />\r\n        <Background variant=\"dots\" gap={12} size={1} />\r\n      </ReactFlow>\r\n      {/* {editingNode && (\r\n        <div style={{ position: 'absolute', top:10, right:10, background: 'white', padding:10, zIndex: 1000}}>\r\n          <form onSubmit={handleEditSubmit}>\r\n            <input name=\"nodeName\" defaultValue={editingNode.data.label} />\r\n            <textarea name=\"nodeNote\" defaultValue={editingNode.data.note || ''} />\r\n            <button type=\"submit\">Update</button>\r\n          </form> \r\n        </div>\r\n      )} */}\r\n      {/* {editingNode && (\r\n        <div style={{ position: 'absolute', top: 10, right: 10, background: 'white', padding: 10, zIndex: 1000, borderRadius: '5px', boxShadow: '0 0 10px rgba(0,0,0,0.1)' }}>\r\n          <form onSubmit={handleEditSubmit}>\r\n            <div style={{ marginBottom: '10px' }}>\r\n              <label htmlFor=\"nodeName\">Node Name:</label>\r\n              <input id=\"nodeName\" name=\"nodeName\" defaultValue={editingNode.data.label} style={{ width: '100%' }} />\r\n            </div>\r\n            <div style={{ marginBottom: '10px' }}>\r\n              <label htmlFor=\"nodeNote\">Note:</label>\r\n              <textarea id=\"nodeNote\" name=\"nodeNote\" defaultValue={editingNode.data.note || ''} style={{ width: '100%', height: '60px' }} />\r\n            </div>\r\n            <div style={{ display: 'flex', justifyContent: 'space-between' }}>\r\n              <button type=\"submit\">Update</button>\r\n              <button type=\"button\" onClick={handleAddChild}>Add Child</button>\r\n              <button type=\"button\" onClick={() => setEditingNode(null)}>Cancel</button>\r\n            </div>\r\n          </form>\r\n        </div>\r\n      )} */}\r\n      <div style={{ position: 'absolute', right: 10, top: 10 }}>\r\n        <button onClick={() => onAddChild(nodes[0])}>Add Child Node</button>\r\n      </div>\r\n      <button onClick={handleSave} style={{ position: 'absolute', bottom: 10, right: 10 }} >Save as PNG</button>\r\n    </div>\r\n\r\n  );\r\n}\r\n\r\n// Helper function to convert mind map data to React Flow format\r\nfunction convertToReactFlowFormat(data, parentId = null, level = 0, index = 0) {\r\n  const nodes = [];\r\n  const edges = [];\r\n\r\n  const nodeWidth = 150;\r\n  const nodeHeight = 50;\r\n  const horizontalSpacing = 200;\r\n  const verticalSpacing = 100;\r\n\r\n  function processNode(node, parentId, level , index) {\r\n    const id = `${level}-${index}-${node.name.replace(/\\s+/g, '-').toLowerCase()}`;\r\n    const x = level * horizontalSpacing;\r\n    const y = index * verticalSpacing;    \r\n    nodes.push({\r\n      id,\r\n      type: 'custom',\r\n      position: { x, y },\r\n      data: { label: node.name, note: node.attributes?.note },\r\n      style: { width: nodeWidth, height: nodeHeight },\r\n    });\r\n\r\n    if (parentId) {\r\n      edges.push({ id: `${parentId}-${id}`, source: parentId, target: id, type: 'smoothstep' });\r\n    }\r\n\r\n    if (node.children) {\r\n      node.children.forEach((child, childIndex) => {\r\n        const { childNodes, childEdges } = processNode(child, id, level+1, childIndex);\r\n        nodes.push(...childNodes);\r\n        edges.push(...childEdges);\r\n      });\r\n    }\r\n\r\n    return { childNodes: nodes, childEdges: edges };\r\n  }\r\n\r\n  const { childNodes, childEdges } = processNode(data, parentId, level, index);\r\n  return { nodes: childNodes, edges: childEdges };\r\n}\r\n\r\nexport default MindMap;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}