{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\alexa\\\\chat_based_mmapp\\\\frontend\\\\src\\\\components\\\\MindMap.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useCallback, useRef } from 'react';\nimport ReactFlow, { Controls, Background, useNodesState, useEdgesState, addEdge } from 'reactflow';\nimport 'reactflow/dist/style.css';\nimport { toPng } from 'html-to-image';\n\n// Custom node component\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst CustomNode = ({\n  data\n}) => {\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    style: {\n      padding: '10px',\n      border: '1px solid #ddd',\n      borderRadius: '5px',\n      background: 'white'\n    },\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      children: data.label\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 16,\n      columnNumber: 7\n    }, this), data.note && /*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        fontSize: '10px',\n        color: '#888'\n      },\n      children: data.note\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 17,\n      columnNumber: 21\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 15,\n    columnNumber: 5\n  }, this);\n};\n_c = CustomNode;\nconst nodeTypes = {\n  custom: CustomNode\n};\nfunction MindMap({\n  data,\n  onUpdate\n}) {\n  _s();\n  const [nodes, setNodes, onNodesChange] = useNodesState([]);\n  const [edges, setEdges, onEdgesChange] = useEdgesState([]);\n  // const [translate, setTranslate] = useState({ x: 300, y: 50 });\n  const [editingNode, setEditingNode] = useState(null);\n  const reactFlowWrapper = useRef(null);\n  const reactFlowInstance = useRef(null);\n\n  // Convert mind map data to React Flow format\n  React.useEffect(() => {\n    if (data) {\n      const {\n        nodes: newNodes,\n        edges: newEdges\n      } = convertToReactFlowFormat(data);\n      setNodes(newNodes);\n      setEdges(newEdges);\n    }\n  }, [data, setNodes, setEdges]);\n  const onConnect = useCallback(params => setEdges(eds => addEdge(params, eds)), [setEdges]);\n  const handleNodeClick = (event, node) => {\n    // Handle node click for editing\n    setEditingNode(node);\n  };\n  const handleEditSubmit = e => {\n    e.preventDefault();\n    const updatedNode = {\n      ...editingNode,\n      data: {\n        ...editingNode.data,\n        label: e.target.elements.nodeName.value,\n        note: e.target.elements.nodeNote.value\n      }\n    };\n    setNodes(nds => nds.map(node => node.id === updatedNode.id ? updatedNode : node));\n    onUpdate({\n      updatedNode\n    });\n    setEditingNode(null);\n  };\n  const handleSave = useCallback(() => {\n    if (reactFlowInstance.current && reactFlowWrapper.current) {\n      const nodesBounds = reactFlowInstance.current.getNodes().reduce((bounds, node) => {\n        bounds.minX = Math.min(bounds.minX, node.position.x);\n        bounds.minY = Math.min(bounds.minY, node.position.y);\n        bounds.maxX = Math.max(bounds.maxX, node.position.x + node.width);\n        bounds.maxY = Math.max(bounds.maxY, node.position.y + node.height);\n        return bounds;\n      }, {\n        minX: Infinity,\n        minY: Infinity,\n        maxX: -Infinity,\n        maxY: -Infinity\n      });\n      const width = nodesBounds.maxX - nodesBounds.minX + 50;\n      const height = nodesBounds.maxY - nodesBounds.minY + 50;\n      const transformX = -nodesBounds.minX + 25;\n      const transformY = -nodesBounds.minY + 25;\n      reactFlowInstance.current.setViewport({\n        x: transformX,\n        y: transformY,\n        zoom: 1\n      });\n      toPng(reactFlowWrapper.current, {\n        cacheBust: true,\n        backgroundColor: '#ffffff',\n        width: width,\n        height: height,\n        style: {\n          width: `${width}px`,\n          height: `${height}px`\n        }\n      }).then(dataUrl => {\n        const link = document.createElement('a');\n        link.download = 'mind-map.png';\n        link.href = dataUrl;\n        link.click();\n      }).catch(error => {\n        console.error('Error saving mind map:', error);\n      });\n    }\n  }, []);\n  const handleDisplay = () => {\n    if (reactFlowWrapper.current === null) {\n      return;\n    }\n\n    // const node = document.getElementById('mind-map-container');\n    toPng(reactFlowWrapper.current, {\n      cacheBust: true\n    }).then(dataUrl => {\n      const img = new Image();\n      img.src = dataUrl;\n      document.body.appendChild(img);\n    }).catch(error => {\n      console.error('Error displaying mind map:', error);\n    });\n  };\n  console.log('MindMap component received data:', data);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    ref: reactFlowWrapper,\n    style: {\n      width: '100%',\n      height: '500px',\n      border: '1px solid black'\n    },\n    children: [/*#__PURE__*/_jsxDEV(ReactFlow, {\n      nodes: nodes,\n      edges: edges,\n      onNodesChange: onNodesChange,\n      onEdgesChange: onEdgesChange,\n      onConnect: onConnect,\n      onNodeClick: handleNodeClick,\n      nodeTypes: nodeTypes,\n      fitView: true,\n      children: [/*#__PURE__*/_jsxDEV(Controls, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 138,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Background, {\n        variant: \"dots\",\n        gap: 12,\n        size: 1\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 139,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 128,\n      columnNumber: 7\n    }, this), editingNode && /*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        position: 'absolute',\n        top: 10,\n        right: 10,\n        background: 'white',\n        padding: 10,\n        zIndex: 1000\n      },\n      children: /*#__PURE__*/_jsxDEV(\"form\", {\n        onSubmit: handleEditSubmit,\n        children: [/*#__PURE__*/_jsxDEV(\"input\", {\n          name: \"nodeName\",\n          defaultValue: editingNode.data.label\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 144,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"textarea\", {\n          name: \"nodeNote\",\n          defaultValue: editingNode.data.note || ''\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 145,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          type: \"submit\",\n          children: \"Update\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 146,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 143,\n        columnNumber: 11\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 142,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: handleSave,\n      style: {\n        position: 'absolute',\n        bottom: 10,\n        right: 10\n      },\n      children: \"Save as PNG\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 150,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 127,\n    columnNumber: 5\n  }, this);\n}\n\n// Helper function to convert mind map data to React Flow format\n_s(MindMap, \"RX/R8gE+9EO9UzbuX50fSVgWjfY=\", false, function () {\n  return [useNodesState, useEdgesState];\n});\n_c2 = MindMap;\nfunction convertToReactFlowFormat(data, parentId = null, x = 0, y = 0) {\n  const nodes = [];\n  const edges = [];\n  function processNode(node, parentId, x, y) {\n    var _node$attributes;\n    const id = node.name.replace(/\\s+/g, '-').toLowerCase();\n    nodes.push({\n      id,\n      type: 'custom',\n      position: {\n        x,\n        y\n      },\n      data: {\n        label: node.name,\n        note: (_node$attributes = node.attributes) === null || _node$attributes === void 0 ? void 0 : _node$attributes.note\n      }\n    });\n    if (parentId) {\n      edges.push({\n        id: `${parentId}-${id}`,\n        source: parentId,\n        target: id\n      });\n    }\n    if (node.children) {\n      const childSpacing = 150;\n      node.children.forEach((child, index) => {\n        const childX = x + 200;\n        const childY = y + (index - (node.children.length - 1) / 2) * childSpacing;\n        const {\n          childNodes,\n          childEdges\n        } = processNode(child, id, childX, childY);\n        nodes.push(...childNodes);\n        edges.push(...childEdges);\n      });\n    }\n    return {\n      childNodes: nodes,\n      childEdges: edges\n    };\n  }\n  const {\n    childNodes,\n    childEdges\n  } = processNode(data, parentId, x, y);\n  return {\n    nodes: childNodes,\n    edges: childEdges\n  };\n}\nexport default MindMap;\nvar _c, _c2;\n$RefreshReg$(_c, \"CustomNode\");\n$RefreshReg$(_c2, \"MindMap\");","map":{"version":3,"names":["React","useState","useCallback","useRef","ReactFlow","Controls","Background","useNodesState","useEdgesState","addEdge","toPng","jsxDEV","_jsxDEV","CustomNode","data","style","padding","border","borderRadius","background","children","label","fileName","_jsxFileName","lineNumber","columnNumber","note","fontSize","color","_c","nodeTypes","custom","MindMap","onUpdate","_s","nodes","setNodes","onNodesChange","edges","setEdges","onEdgesChange","editingNode","setEditingNode","reactFlowWrapper","reactFlowInstance","useEffect","newNodes","newEdges","convertToReactFlowFormat","onConnect","params","eds","handleNodeClick","event","node","handleEditSubmit","e","preventDefault","updatedNode","target","elements","nodeName","value","nodeNote","nds","map","id","handleSave","current","nodesBounds","getNodes","reduce","bounds","minX","Math","min","position","x","minY","y","maxX","max","width","maxY","height","Infinity","transformX","transformY","setViewport","zoom","cacheBust","backgroundColor","then","dataUrl","link","document","createElement","download","href","click","catch","error","console","handleDisplay","img","Image","src","body","appendChild","log","ref","onNodeClick","fitView","variant","gap","size","top","right","zIndex","onSubmit","name","defaultValue","type","onClick","bottom","_c2","parentId","processNode","_node$attributes","replace","toLowerCase","push","attributes","source","childSpacing","forEach","child","index","childX","childY","length","childNodes","childEdges","$RefreshReg$"],"sources":["C:/Users/alexa/chat_based_mmapp/frontend/src/components/MindMap.js"],"sourcesContent":["import React, { useState, useCallback, useRef } from 'react';\r\nimport ReactFlow, {\r\n  Controls,\r\n  Background,\r\n  useNodesState,\r\n  useEdgesState,\r\n  addEdge,\r\n} from 'reactflow';\r\nimport 'reactflow/dist/style.css';\r\nimport { toPng } from 'html-to-image';\r\n\r\n// Custom node component\r\nconst CustomNode = ({ data }) => {\r\n  return (\r\n    <div style={{ padding: '10px', border: '1px solid #ddd', borderRadius: '5px', background: 'white' }}>\r\n      <div>{data.label}</div>\r\n      {data.note && <div style={{ fontSize: '10px', color: '#888' }}>{data.note}</div>}\r\n    </div>\r\n  );\r\n};\r\n\r\nconst nodeTypes = {\r\n  custom: CustomNode,\r\n};\r\n\r\nfunction MindMap({ data, onUpdate }) {\r\n  const [nodes, setNodes, onNodesChange] = useNodesState([]);\r\n  const [edges, setEdges, onEdgesChange] = useEdgesState([]);\r\n  // const [translate, setTranslate] = useState({ x: 300, y: 50 });\r\n  const [editingNode, setEditingNode] = useState(null);\r\n  const reactFlowWrapper = useRef(null);\r\n  const reactFlowInstance = useRef(null);\r\n\r\n  // Convert mind map data to React Flow format\r\n  React.useEffect(() => {\r\n    if (data) {\r\n      const { nodes: newNodes, edges: newEdges } = convertToReactFlowFormat(data);\r\n      setNodes(newNodes);\r\n      setEdges(newEdges);\r\n    }\r\n  }, [data, setNodes, setEdges]);\r\n\r\n  const onConnect = useCallback((params) => setEdges((eds) => addEdge(params, eds)), [setEdges]);\r\n  \r\n  const handleNodeClick = (event, node) => {\r\n    // Handle node click for editing\r\n    setEditingNode(node);\r\n  };\r\n\r\n  const handleEditSubmit = (e) => {\r\n    e.preventDefault();\r\n    const updatedNode = {\r\n      ...editingNode,\r\n      data: {\r\n        ...editingNode.data,\r\n        label: e.target.elements.nodeName.value,\r\n        note: e.target.elements.nodeNote.value,\r\n      },\r\n    };\r\n    setNodes((nds) => nds.map((node) => (node.id === updatedNode.id ? updatedNode : node)));\r\n    onUpdate({ updatedNode });\r\n    setEditingNode(null);\r\n  };\r\n\r\n  const handleSave = useCallback(() => {\r\n    if (reactFlowInstance.current && reactFlowWrapper.current) {\r\n      const nodesBounds = reactFlowInstance.current.getNodes().reduce(\r\n        (bounds, node) => {\r\n          bounds.minX = Math.min(bounds.minX, node.position.x);\r\n          bounds.minY = Math.min(bounds.minY, node.position.y);\r\n          bounds.maxX = Math.max(bounds.maxX, node.position.x + node.width);\r\n          bounds.maxY = Math.max(bounds.maxY, node.position.y + node.height);\r\n          return bounds;\r\n        },\r\n        { minX: Infinity, minY: Infinity, maxX: -Infinity, maxY: -Infinity }\r\n      );\r\n\r\n      const width = nodesBounds.maxX - nodesBounds.minX + 50;\r\n      const height = nodesBounds.maxY - nodesBounds.minY + 50;\r\n      const transformX = -nodesBounds.minX + 25;\r\n      const transformY = -nodesBounds.minY + 25;\r\n\r\n      reactFlowInstance.current.setViewport({ x: transformX, y: transformY, zoom: 1 });\r\n\r\n    \r\n      toPng(reactFlowWrapper.current, { \r\n        cacheBust: true, \r\n        backgroundColor: '#ffffff',\r\n        width: width,\r\n        height: height,\r\n        style: {\r\n          width: `${width}px`,\r\n          height: `${height}px`,\r\n        },\r\n      })\r\n        .then((dataUrl) => {\r\n          const link = document.createElement('a');\r\n          link.download = 'mind-map.png';\r\n          link.href = dataUrl;\r\n          link.click();\r\n        })\r\n        .catch((error) => {\r\n          console.error('Error saving mind map:', error);\r\n        });\r\n    }\r\n  }, []);\r\n\r\n  const handleDisplay = () => {\r\n    if (reactFlowWrapper.current === null) {\r\n      return;\r\n    }\r\n\r\n    // const node = document.getElementById('mind-map-container');\r\n    toPng(reactFlowWrapper.current, { cacheBust: true, })\r\n      .then((dataUrl) => {\r\n        const img = new Image();\r\n        img.src = dataUrl;\r\n        document.body.appendChild(img);\r\n      })\r\n      .catch((error) => {\r\n        console.error('Error displaying mind map:', error);\r\n      });\r\n  }\r\n\r\n  console.log('MindMap component received data:', data)\r\n  return (\r\n    <div ref={reactFlowWrapper} style={{ width: '100%', height: '500px', border: '1px solid black' }}>\r\n      <ReactFlow\r\n        nodes={nodes}\r\n        edges={edges}\r\n        onNodesChange={onNodesChange}\r\n        onEdgesChange={onEdgesChange}\r\n        onConnect={onConnect}\r\n        onNodeClick={handleNodeClick}\r\n        nodeTypes={nodeTypes}\r\n        fitView\r\n      >\r\n        <Controls />\r\n        <Background variant=\"dots\" gap={12} size={1} />\r\n      </ReactFlow>\r\n      {editingNode && (\r\n        <div style={{ position: 'absolute', top:10, right:10, background: 'white', padding:10, zIndex: 1000}}>\r\n          <form onSubmit={handleEditSubmit}>\r\n            <input name=\"nodeName\" defaultValue={editingNode.data.label} />\r\n            <textarea name=\"nodeNote\" defaultValue={editingNode.data.note || ''} />\r\n            <button type=\"submit\">Update</button>\r\n          </form> \r\n        </div>\r\n      )}\r\n      <button onClick={handleSave} style={{ position: 'absolute', bottom: 10, right: 10 }} >Save as PNG</button>\r\n    </div>\r\n\r\n  );\r\n}\r\n\r\n// Helper function to convert mind map data to React Flow format\r\nfunction convertToReactFlowFormat(data, parentId = null, x = 0, y = 0) {\r\n  const nodes = [];\r\n  const edges = [];\r\n\r\n  function processNode(node, parentId, x, y) {\r\n    const id = node.name.replace(/\\s+/g, '-').toLowerCase();\r\n    nodes.push({\r\n      id,\r\n      type: 'custom',\r\n      position: { x, y },\r\n      data: { label: node.name, note: node.attributes?.note },\r\n    });\r\n\r\n  if (parentId) {\r\n    edges.push({ id: `${parentId}-${id}`, source: parentId, target: id });\r\n  }\r\n\r\n  if (node.children) {\r\n    const childSpacing = 150;\r\n    node.children.forEach((child, index) => {\r\n      const childX = x + 200;\r\n      const childY = y + (index - (node.children.length - 1) / 2) * childSpacing;\r\n      const { childNodes, childEdges } = processNode(child, id, childX, childY);\r\n      nodes.push(...childNodes);\r\n      edges.push(...childEdges);\r\n    });\r\n  }\r\n\r\n  return { childNodes: nodes, childEdges: edges };\r\n}\r\n\r\nconst { childNodes, childEdges } = processNode(data, parentId, x, y);\r\nreturn { nodes: childNodes, edges: childEdges };\r\n}\r\nexport default MindMap;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}