{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\alexa\\\\chat_based_mmapp\\\\frontend\\\\src\\\\App.js\";\nimport React, { useState, useEffect } from 'react';\nimport io from 'socket.io-client';\nimport axios from 'axios';\nimport MindMap from './components/MindMap';\nimport ChatInterface from './components/ChatInterface';\nconst API_URL = process.env.REACT_APP_API_URL || 'http://localhost:5000';\nconst SOCKET_URL = process.env.REACT_APP_SOCKET_URL || 'http://localhost:5000';\nconst socket = io(SOCKET_URL);\nfunction App() {\n  const [mindMap, setMindMap] = useState(null);\n  const [socketConnected, setSocketConnected] = useState(false);\n\n  // Error handling\n  useEffect(() => {\n    console.log('Attempting to connect to WebSocket...');\n    socket.on('connect', () => {\n      console.log('WebSocket connected successfully');\n      setSocketConnected(true);\n      // You might want to update the UI to show the connected state\n    });\n\n    // ... other socket event listeners ...\n\n    socket.on('map_updated', updatedMap => {\n      setMindMap(updatedMap);\n    });\n    socket.on('error', error => {\n      console.error('Socket error:', error);\n      // Handle the error (e.g., show a message to the user)\n    });\n    socket.on('connect_error', error => {\n      console.error('Socket connection error:', error);\n      setSocketConnected(false);\n    });\n    return () => {\n      socket.off('connect');\n      socket.off('map_updated');\n      socket.off('error');\n      socket.off('connect_error');\n      // ... remove other listeners ...\n    };\n  }, []);\n  const handleChatInput = async input => {\n    try {\n      const response = await axios.post(`${API_URL}/api/generate_map`, {\n        input\n      });\n      setMindMap(response.data);\n    } catch (error) {\n      console.error('Error generating mind map:', error);\n      // Handle the error(e.g. show a message to the user)\n    }\n    // const response = await fetch('/api/generate_map', {\n    //   method: 'POST',\n    //   headers: { 'Content-Type': 'application/json' },\n    //   body: JSON.stringify({ input }),\n    // });\n    // const newMap = await response.json();\n    // setMindMap(newMap);\n  };\n  const handleMapUpdate = changes => {\n    // send update to the server\n    socket.emit('update_map', {\n      map: mindMap,\n      changes\n    });\n  };\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: \"App\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 74,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(\"p\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 75,\n      columnNumber: 7\n    }\n  }, \"Socket status: \", socket.connected ? 'Connected' : 'Disconnected'), /*#__PURE__*/React.createElement(ChatInterface, {\n    onSubmit: handleChatInput,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 76,\n      columnNumber: 7\n    }\n  }), mindMap && /*#__PURE__*/React.createElement(MindMap, {\n    data: mindMap,\n    onUpdate: handleMapUpdate,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 77,\n      columnNumber: 19\n    }\n  }));\n}\nexport default App;","map":{"version":3,"names":["React","useState","useEffect","io","axios","MindMap","ChatInterface","API_URL","process","env","REACT_APP_API_URL","SOCKET_URL","REACT_APP_SOCKET_URL","socket","App","mindMap","setMindMap","socketConnected","setSocketConnected","console","log","on","updatedMap","error","off","handleChatInput","input","response","post","data","handleMapUpdate","changes","emit","map","createElement","className","__self","__source","fileName","_jsxFileName","lineNumber","columnNumber","connected","onSubmit","onUpdate"],"sources":["C:/Users/alexa/chat_based_mmapp/frontend/src/App.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\r\nimport io from 'socket.io-client';\r\nimport axios from 'axios';\r\nimport MindMap from './components/MindMap';\r\nimport ChatInterface from './components/ChatInterface';\r\n\r\nconst API_URL = process.env.REACT_APP_API_URL || 'http://localhost:5000';\r\nconst SOCKET_URL = process.env.REACT_APP_SOCKET_URL || 'http://localhost:5000';\r\n\r\nconst socket = io(SOCKET_URL);\r\n\r\nfunction App() {\r\n  const [mindMap, setMindMap] = useState(null);\r\n  const [socketConnected, setSocketConnected] = useState(false);\r\n\r\n  // Error handling\r\n  useEffect(() => {\r\n    console.log('Attempting to connect to WebSocket...');\r\n  \r\n    socket.on('connect', () => {\r\n      console.log('WebSocket connected successfully');\r\n      setSocketConnected(true);\r\n      // You might want to update the UI to show the connected state\r\n    });\r\n  \r\n    // ... other socket event listeners ...\r\n\r\n    socket.on('map_updated', (updatedMap) => {\r\n      setMindMap(updatedMap);\r\n    });\r\n\r\n    socket.on('error', (error) => {\r\n      console.error('Socket error:', error);\r\n      // Handle the error (e.g., show a message to the user)\r\n    });\r\n\r\n    socket.on('connect_error', (error) => {\r\n      console.error('Socket connection error:', error);\r\n      setSocketConnected(false);\r\n    });\r\n  \r\n    return () => {\r\n      socket.off('connect');\r\n      socket.off('map_updated');\r\n      socket.off('error');\r\n      socket.off('connect_error');\r\n      // ... remove other listeners ...\r\n    };\r\n  }, []);\r\n\r\n  const handleChatInput = async (input) => {\r\n    try {\r\n      const response = await axios.post(`${API_URL}/api/generate_map`, { input });\r\n      setMindMap(response.data);\r\n    } catch (error) {\r\n      console.error('Error generating mind map:', error);\r\n      // Handle the error(e.g. show a message to the user)\r\n    }\r\n    // const response = await fetch('/api/generate_map', {\r\n    //   method: 'POST',\r\n    //   headers: { 'Content-Type': 'application/json' },\r\n    //   body: JSON.stringify({ input }),\r\n    // });\r\n    // const newMap = await response.json();\r\n    // setMindMap(newMap);\r\n  };\r\n\r\n  const handleMapUpdate = (changes) => {\r\n    // send update to the server\r\n    socket.emit('update_map', { map: mindMap, changes });\r\n  };\r\n\r\n  return (\r\n    <div className=\"App\">\r\n      <p>Socket status: {socket.connected ? 'Connected' : 'Disconnected'}</p>\r\n      <ChatInterface onSubmit={handleChatInput} />\r\n      {mindMap && <MindMap data={mindMap} onUpdate={handleMapUpdate} />}\r\n    </div>\r\n\r\n  );\r\n}\r\n\r\nexport default App;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module"}